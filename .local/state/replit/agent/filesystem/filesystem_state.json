{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"slideIn\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"slide-in\": \"slideIn 0.3s ease-out\",\n      },\n      boxShadow: {\n        'card': '0 1px 3px 0 rgba(59, 130, 246, 0.1), 0 1px 2px -1px rgba(59, 130, 246, 0.1)',\n        'card-hover': '0 12px 24px -10px rgba(0, 0, 0, 0.15)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3213},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import { spawn } from \"child_process\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\nimport express from \"express\";\nimport { setupVite } from \"./vite\";\nimport fs from \"fs\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nif (isProduction) {\n  console.log(\"=\" .repeat(60));\n  console.log(\"Starting Production Server\");\n  console.log(\"=\" .repeat(60));\n  console.log(\"\");\n  \n  // In production, just start the Python server\n  // It will serve both API and static files from dist/public\n  const pythonServerPath = path.join(__dirname, \"..\", \"python_server\");\n  \n  console.log(\"Starting Python backend on port 5000...\");\n  console.log(\"The Python server will serve the built frontend and API\");\n  console.log(\"\");\n  \n  const pythonServer = spawn(\"python3\", [\"main.py\"], {\n    cwd: pythonServerPath,\n    stdio: \"inherit\",\n    env: { ...process.env, PORT: \"5000\" }\n  });\n  \n  pythonServer.on(\"error\", (error) => {\n    console.error(\"Failed to start Python server:\", error);\n    process.exit(1);\n  });\n  \n  pythonServer.on(\"close\", (code) => {\n    console.log(`Python server exited with code ${code}`);\n    process.exit(code || 0);\n  });\n  \n  process.on(\"SIGINT\", () => {\n    console.log(\"\\nShutting down server...\");\n    pythonServer.kill(\"SIGINT\");\n    process.exit(0);\n  });\n  \n  process.on(\"SIGTERM\", () => {\n    console.log(\"\\nShutting down server...\");\n    pythonServer.kill(\"SIGTERM\");\n    process.exit(0);\n  });\n} else {\n  console.log(\"=\" .repeat(60));\n  console.log(\"Starting Vite Dev Server + Python Backend\");\n  console.log(\"=\" .repeat(60));\n  console.log(\"\");\n\n  // Create Express app for Vite\n  const app = express();\n\n  // Setup Vite for development on port 5173\n  const server = (await import('http')).createServer(app);\n  await setupVite(app, server);\n\n  // Start Vite server on port 5173\n  const port = 5173;\n  server.listen(port, \"0.0.0.0\", () => {\n    console.log(`✓ Vite dev server running on http://localhost:${port}`);\n    console.log(\"\");\n  });\n\n  // Start Python server on port 5000 (main port)\n  console.log(\"Starting Python backend on port 5000...\");\n  const pythonServerPath = path.join(__dirname, \"..\", \"python_server\");\n\n  const pythonServer = spawn(\"python3\", [\"main.py\"], {\n    cwd: pythonServerPath,\n    stdio: \"inherit\",\n    env: { ...process.env, PORT: \"5000\" }\n  });\n\n  pythonServer.on(\"error\", (error) => {\n    console.error(\"Failed to start Python server:\", error);\n    process.exit(1);\n  });\n\n  pythonServer.on(\"close\", (code) => {\n    console.log(`Python server exited with code ${code}`);\n    process.exit(code || 0);\n  });\n\n  // Handle process termination\n  process.on(\"SIGINT\", () => {\n    console.log(\"\\nShutting down servers...\");\n    pythonServer.kill(\"SIGINT\");\n    process.exit(0);\n  });\n\n  process.on(\"SIGTERM\", () => {\n    console.log(\"\\nShutting down servers...\");\n    pythonServer.kill(\"SIGTERM\");\n    process.exit(0);\n  });\n}\n","size_bytes":2998},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || \"\" \n});\n\ninterface DocumentContext {\n  name: string;\n  content: string;\n  category: string;\n}\n\nexport async function askHRAssistant(\n  question: string,\n  documents: DocumentContext[]\n): Promise<{ answer: string; documentsUsed: string[] }> {\n  try {\n    if (!process.env.OPENAI_API_KEY) {\n      throw new Error(\"OpenAI API key is not configured. Please add your OPENAI_API_KEY to use the AI Assistant.\");\n    }\n\n    const context = documents\n      .map(doc => `Document: ${doc.name} (${doc.category})\\nContent: ${doc.content}`)\n      .join('\\n\\n---\\n\\n');\n\n    const systemPrompt = `You are an AI HR Assistant for an employee self-service portal. Your role is to answer HR-related questions based on the provided company documents and policies.\n\nGuidelines:\n- Always be helpful, professional, and accurate\n- Reference specific policy documents when applicable\n- If you don't have enough information, say so clearly\n- Provide actionable advice when possible\n- Keep responses concise but comprehensive\n- Format your response clearly with bullet points or sections when appropriate\n\nAvailable Documents:\n${context}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: question }\n      ],\n      max_tokens: 1000,\n    });\n\n    const answer = response.choices[0].message.content || \"I apologize, but I couldn't generate a response to your question.\";\n    \n    // Determine which documents were likely used based on the response\n    const documentsUsed = documents\n      .filter(doc => answer.toLowerCase().includes(doc.name.toLowerCase()) || \n                    answer.toLowerCase().includes(doc.category.toLowerCase()))\n      .map(doc => doc.name);\n\n    return {\n      answer,\n      documentsUsed: documentsUsed.length > 0 ? documentsUsed : [documents[0]?.name].filter(Boolean)\n    };\n\n  } catch (error) {\n    console.error(\"Error calling OpenAI API:\", error);\n    if (error instanceof Error && error.message.includes(\"OpenAI API key is not configured\")) {\n      throw error;\n    }\n    throw new Error(\"Failed to get AI response. Please try again later.\");\n  }\n}\n\nexport async function processDocumentForVectorization(\n  documentContent: string,\n  documentName: string\n): Promise<string[]> {\n  try {\n    if (!process.env.OPENAI_API_KEY) {\n      // Fallback: simple text splitting when API key is not available\n      const chunks = documentContent.split('\\n\\n').filter(chunk => chunk.trim().length > 50);\n      return chunks.slice(0, 50);\n    }\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Break down this HR document into meaningful chunks for vector storage. Each chunk should be self-contained and cover a specific topic or policy. Return the chunks as a JSON array of strings.\"\n        },\n        {\n          role: \"user\", \n          content: `Document: ${documentName}\\n\\nContent: ${documentContent}`\n        }\n      ],\n      response_format: { type: \"json_object\" },\n      max_tokens: 2000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{\"chunks\": []}');\n    return result.chunks || [];\n\n  } catch (error) {\n    console.error(\"Error processing document:\", error);\n    // Fallback: simple text splitting\n    const chunks = documentContent.split('\\n\\n').filter(chunk => chunk.trim().length > 50);\n    return chunks.slice(0, 50); // Limit to 50 chunks per document\n  }\n}\n","size_bytes":3649},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { askHRAssistant, processDocumentForVectorization } from \"./openai\";\nimport { insertLeaveSchema, insertAttendanceSchema, insertHrDocumentSchema, insertAiConversationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nconst upload = multer({ dest: 'uploads/' });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const currentYear = new Date().getFullYear();\n      const currentMonth = new Date().getMonth() + 1;\n\n      const [leaveBalances, leaves, attendanceRecords] = await Promise.all([\n        storage.getLeaveBalances(userId, currentYear),\n        storage.getUserLeaves(userId),\n        storage.getAttendanceRecords(userId, currentMonth, currentYear)\n      ]);\n\n      const totalLeavesUsed = leaveBalances.reduce((sum, balance) => sum + (balance.usedDays ?? 0), 0);\n      const totalLeavesRemaining = leaveBalances.reduce((sum, balance) => sum + (balance.totalDays - (balance.usedDays ?? 0)), 0);\n      \n      const presentDays = attendanceRecords.filter(record => record.status === 'present' || record.status === 'wfh').length;\n      const totalWorkingDays = attendanceRecords.length;\n      const attendanceRate = totalWorkingDays > 0 ? (presentDays / totalWorkingDays * 100).toFixed(1) : \"0.0\";\n\n      const pendingLeaves = leaves.filter(leave => leave.status === 'pending').length;\n\n      res.json({\n        leavesUsed: totalLeavesUsed,\n        leavesRemaining: totalLeavesRemaining,\n        attendanceRate: parseFloat(attendanceRate),\n        pendingRequests: pendingLeaves,\n        leaveBalances: leaveBalances.map(balance => ({\n          type: balance.leaveTypeId,\n          used: balance.usedDays ?? 0,\n          total: balance.totalDays,\n          remaining: balance.totalDays - (balance.usedDays ?? 0)\n        }))\n      });\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Leave management routes\n  app.get('/api/leave-types', isAuthenticated, async (req, res) => {\n    try {\n      const leaveTypes = await storage.getLeaveTypes();\n      res.json(leaveTypes);\n    } catch (error) {\n      console.error(\"Error fetching leave types:\", error);\n      res.status(500).json({ message: \"Failed to fetch leave types\" });\n    }\n  });\n\n  app.get('/api/leave-balances', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const year = parseInt(req.query.year as string) || new Date().getFullYear();\n      const balances = await storage.getLeaveBalances(userId, year);\n      res.json(balances);\n    } catch (error) {\n      console.error(\"Error fetching leave balances:\", error);\n      res.status(500).json({ message: \"Failed to fetch leave balances\" });\n    }\n  });\n\n  app.post('/api/leaves', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const leaveData = insertLeaveSchema.parse({ ...req.body, userId });\n      \n      // Calculate days between dates\n      const fromDate = new Date(leaveData.fromDate);\n      const toDate = new Date(leaveData.toDate);\n      const timeDiff = toDate.getTime() - fromDate.getTime();\n      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;\n      \n      const leave = await storage.createLeave({\n        ...leaveData,\n        days: daysDiff.toString()\n      });\n      \n      res.json(leave);\n    } catch (error) {\n      console.error(\"Error creating leave:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid leave data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create leave request\" });\n      }\n    }\n  });\n\n  app.get('/api/leaves', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const leaves = await storage.getUserLeaves(userId);\n      res.json(leaves);\n    } catch (error) {\n      console.error(\"Error fetching leaves:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaves\" });\n    }\n  });\n\n  app.put('/api/leaves/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const updatedLeave = await storage.updateLeave(id, updates);\n      res.json(updatedLeave);\n    } catch (error) {\n      console.error(\"Error updating leave:\", error);\n      res.status(500).json({ message: \"Failed to update leave\" });\n    }\n  });\n\n  app.delete('/api/leaves/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteLeave(id);\n      res.json({ message: \"Leave deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting leave:\", error);\n      res.status(500).json({ message: \"Failed to delete leave\" });\n    }\n  });\n\n  // Attendance routes\n  app.get('/api/attendance', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const month = parseInt(req.query.month as string) || new Date().getMonth() + 1;\n      const year = parseInt(req.query.year as string) || new Date().getFullYear();\n      \n      const records = await storage.getAttendanceRecords(userId, month, year);\n      \n      // Calculate stats\n      const stats = {\n        present: records.filter(r => r.status === 'present').length,\n        absent: records.filter(r => r.status === 'absent').length,\n        leave: records.filter(r => r.status === 'leave').length,\n        wfh: records.filter(r => r.status === 'wfh').length\n      };\n      \n      res.json({ records, stats });\n    } catch (error) {\n      console.error(\"Error fetching attendance:\", error);\n      res.status(500).json({ message: \"Failed to fetch attendance records\" });\n    }\n  });\n\n  app.get('/api/attendance/absent-dates', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const days = parseInt(req.query.days as string) || 7;\n      const absentDates = await storage.getAbsentDates(userId, days);\n      res.json(absentDates);\n    } catch (error) {\n      console.error(\"Error fetching absent dates:\", error);\n      res.status(500).json({ message: \"Failed to fetch absent dates\" });\n    }\n  });\n\n  app.post('/api/attendance/regularize', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { date, status, reason } = req.body;\n      \n      const record = await storage.createAttendanceRecord({\n        userId,\n        date,\n        status,\n        regularizationReason: reason,\n        regularizedAt: new Date()\n      });\n      \n      res.json(record);\n    } catch (error) {\n      console.error(\"Error regularizing attendance:\", error);\n      res.status(500).json({ message: \"Failed to regularize attendance\" });\n    }\n  });\n\n  // Salary slip routes\n  app.get('/api/salary-slips', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const slips = await storage.getSalarySlips(userId);\n      res.json(slips);\n    } catch (error) {\n      console.error(\"Error fetching salary slips:\", error);\n      res.status(500).json({ message: \"Failed to fetch salary slips\" });\n    }\n  });\n\n  app.get('/api/salary-slips/:month/:year', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { month, year } = req.params;\n      const slip = await storage.getSalarySlip(userId, parseInt(month), parseInt(year));\n      \n      if (!slip) {\n        return res.status(404).json({ message: \"Salary slip not found\" });\n      }\n      \n      res.json(slip);\n    } catch (error) {\n      console.error(\"Error fetching salary slip:\", error);\n      res.status(500).json({ message: \"Failed to fetch salary slip\" });\n    }\n  });\n\n  // HR Documents routes\n  app.get('/api/hr-documents', isAuthenticated, async (req, res) => {\n    try {\n      const documents = await storage.getHrDocuments();\n      res.json(documents);\n    } catch (error) {\n      console.error(\"Error fetching HR documents:\", error);\n      res.status(500).json({ message: \"Failed to fetch HR documents\" });\n    }\n  });\n\n  app.post('/api/hr-documents/upload', isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const userId = req.user.claims.sub;\n      const { category } = req.body;\n\n      // Read file content for processing\n      const filePath = req.file.path;\n      const fileContent = fs.readFileSync(filePath, 'utf8');\n\n      // Process document for vectorization\n      const chunks = await processDocumentForVectorization(fileContent, req.file.originalname);\n\n      const document = await storage.createHrDocument({\n        name: req.file.originalname,\n        category: category || 'general',\n        filePath: filePath,\n        fileSize: req.file.size,\n        mimeType: req.file.mimetype,\n        uploadedBy: userId,\n        vectorCount: chunks.length,\n        processedAt: new Date()\n      });\n\n      res.json(document);\n    } catch (error) {\n      console.error(\"Error uploading HR document:\", error);\n      res.status(500).json({ message: \"Failed to upload document\" });\n    }\n  });\n\n  app.delete('/api/hr-documents/:id', isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteHrDocument(id);\n      res.json({ message: \"Document deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting HR document:\", error);\n      res.status(500).json({ message: \"Failed to delete document\" });\n    }\n  });\n\n  // AI Assistant routes\n  app.post('/api/ai/ask', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const { question } = req.body;\n\n      if (!question?.trim()) {\n        return res.status(400).json({ message: \"Question is required\" });\n      }\n\n      // Get HR documents for context\n      const documents = await storage.getHrDocuments();\n      \n      // Simulate document content (in real implementation, you'd extract text from files)\n      const documentContext = documents.map(doc => ({\n        name: doc.name,\n        content: `HR Policy document: ${doc.name}. Category: ${doc.category}. This document contains company policies and procedures.`,\n        category: doc.category\n      }));\n\n      const { answer, documentsUsed } = await askHRAssistant(question, documentContext);\n\n      // Save conversation\n      await storage.createAiConversation({\n        userId,\n        question,\n        answer,\n        documentsUsed\n      });\n\n      res.json({ answer, documentsUsed });\n    } catch (error) {\n      console.error(\"Error processing AI question:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to process your question. Please try again.\";\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  app.get('/api/ai/conversations', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const conversations = await storage.getUserConversations(userId);\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12334},"server/storage.ts":{"content":"import {\n  users,\n  leaves,\n  leaveTypes,\n  leaveBalances,\n  attendanceRecords,\n  salarySlips,\n  hrDocuments,\n  aiConversations,\n  type User,\n  type UpsertUser,\n  type Leave,\n  type InsertLeave,\n  type LeaveType,\n  type LeaveBalance,\n  type AttendanceRecord,\n  type InsertAttendanceRecord,\n  type SalarySlip,\n  type HrDocument,\n  type InsertHrDocument,\n  type AiConversation,\n  type InsertAiConversation,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Leave operations\n  getLeaveTypes(): Promise<LeaveType[]>;\n  getLeaveBalances(userId: string, year: number): Promise<LeaveBalance[]>;\n  createLeave(leave: InsertLeave): Promise<Leave>;\n  getUserLeaves(userId: string): Promise<Leave[]>;\n  updateLeave(id: string, updates: Partial<Leave>): Promise<Leave>;\n  deleteLeave(id: string): Promise<void>;\n\n  // Attendance operations\n  getAttendanceRecords(userId: string, month: number, year: number): Promise<AttendanceRecord[]>;\n  createAttendanceRecord(record: InsertAttendanceRecord): Promise<AttendanceRecord>;\n  updateAttendanceRecord(id: string, updates: Partial<AttendanceRecord>): Promise<AttendanceRecord>;\n  getAbsentDates(userId: string, days: number): Promise<AttendanceRecord[]>;\n\n  // Salary operations\n  getSalarySlips(userId: string): Promise<SalarySlip[]>;\n  getSalarySlip(userId: string, month: number, year: number): Promise<SalarySlip | undefined>;\n\n  // HR Document operations\n  createHrDocument(document: InsertHrDocument): Promise<HrDocument>;\n  getHrDocuments(): Promise<HrDocument[]>;\n  updateHrDocument(id: string, updates: Partial<HrDocument>): Promise<HrDocument>;\n  deleteHrDocument(id: string): Promise<void>;\n\n  // AI Conversation operations\n  createAiConversation(conversation: InsertAiConversation): Promise<AiConversation>;\n  getUserConversations(userId: string): Promise<AiConversation[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getLeaveTypes(): Promise<LeaveType[]> {\n    return await db.select().from(leaveTypes);\n  }\n\n  async getLeaveBalances(userId: string, year: number): Promise<LeaveBalance[]> {\n    return await db\n      .select()\n      .from(leaveBalances)\n      .where(and(eq(leaveBalances.userId, userId), eq(leaveBalances.year, year)));\n  }\n\n  async createLeave(leave: InsertLeave): Promise<Leave> {\n    const [newLeave] = await db\n      .insert(leaves)\n      .values(leave)\n      .returning();\n    return newLeave;\n  }\n\n  async getUserLeaves(userId: string): Promise<Leave[]> {\n    return await db\n      .select()\n      .from(leaves)\n      .where(eq(leaves.userId, userId))\n      .orderBy(desc(leaves.appliedAt));\n  }\n\n  async updateLeave(id: string, updates: Partial<Leave>): Promise<Leave> {\n    const [updatedLeave] = await db\n      .update(leaves)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(leaves.id, id))\n      .returning();\n    return updatedLeave;\n  }\n\n  async deleteLeave(id: string): Promise<void> {\n    await db.delete(leaves).where(eq(leaves.id, id));\n  }\n\n  async getAttendanceRecords(userId: string, month: number, year: number): Promise<AttendanceRecord[]> {\n    const startDate = new Date(year, month - 1, 1);\n    const endDate = new Date(year, month, 0);\n    \n    return await db\n      .select()\n      .from(attendanceRecords)\n      .where(\n        and(\n          eq(attendanceRecords.userId, userId),\n          gte(attendanceRecords.date, startDate.toISOString().split('T')[0]),\n          lte(attendanceRecords.date, endDate.toISOString().split('T')[0])\n        )\n      )\n      .orderBy(asc(attendanceRecords.date));\n  }\n\n  async createAttendanceRecord(record: InsertAttendanceRecord): Promise<AttendanceRecord> {\n    const [newRecord] = await db\n      .insert(attendanceRecords)\n      .values(record)\n      .returning();\n    return newRecord;\n  }\n\n  async updateAttendanceRecord(id: string, updates: Partial<AttendanceRecord>): Promise<AttendanceRecord> {\n    const [updatedRecord] = await db\n      .update(attendanceRecords)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(attendanceRecords.id, id))\n      .returning();\n    return updatedRecord;\n  }\n\n  async getAbsentDates(userId: string, days: number): Promise<AttendanceRecord[]> {\n    const pastDate = new Date();\n    pastDate.setDate(pastDate.getDate() - days);\n    \n    return await db\n      .select()\n      .from(attendanceRecords)\n      .where(\n        and(\n          eq(attendanceRecords.userId, userId),\n          eq(attendanceRecords.status, 'absent'),\n          gte(attendanceRecords.date, pastDate.toISOString().split('T')[0])\n        )\n      )\n      .orderBy(desc(attendanceRecords.date));\n  }\n\n  async getSalarySlips(userId: string): Promise<SalarySlip[]> {\n    return await db\n      .select()\n      .from(salarySlips)\n      .where(eq(salarySlips.userId, userId))\n      .orderBy(desc(salarySlips.year), desc(salarySlips.month));\n  }\n\n  async getSalarySlip(userId: string, month: number, year: number): Promise<SalarySlip | undefined> {\n    const [slip] = await db\n      .select()\n      .from(salarySlips)\n      .where(\n        and(\n          eq(salarySlips.userId, userId),\n          eq(salarySlips.month, month),\n          eq(salarySlips.year, year)\n        )\n      );\n    return slip;\n  }\n\n  async createHrDocument(document: InsertHrDocument): Promise<HrDocument> {\n    const [newDocument] = await db\n      .insert(hrDocuments)\n      .values(document)\n      .returning();\n    return newDocument;\n  }\n\n  async getHrDocuments(): Promise<HrDocument[]> {\n    return await db\n      .select()\n      .from(hrDocuments)\n      .where(eq(hrDocuments.isActive, true))\n      .orderBy(desc(hrDocuments.createdAt));\n  }\n\n  async updateHrDocument(id: string, updates: Partial<HrDocument>): Promise<HrDocument> {\n    const [updatedDocument] = await db\n      .update(hrDocuments)\n      .set(updates)\n      .where(eq(hrDocuments.id, id))\n      .returning();\n    return updatedDocument;\n  }\n\n  async deleteHrDocument(id: string): Promise<void> {\n    await db.update(hrDocuments)\n      .set({ isActive: false })\n      .where(eq(hrDocuments.id, id));\n  }\n\n  async createAiConversation(conversation: InsertAiConversation): Promise<AiConversation> {\n    const [newConversation] = await db\n      .insert(aiConversations)\n      .values(conversation)\n      .returning();\n    return newConversation;\n  }\n\n  async getUserConversations(userId: string): Promise<AiConversation[]> {\n    return await db\n      .select()\n      .from(aiConversations)\n      .where(eq(aiConversations.userId, userId))\n      .orderBy(desc(aiConversations.createdAt))\n      .limit(50);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7294},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  employeeId: varchar(\"employee_id\").unique(),\n  department: varchar(\"department\"),\n  designation: varchar(\"designation\"),\n  joiningDate: date(\"joining_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const leaveTypes = pgTable(\"leave_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  maxDays: integer(\"max_days\").notNull(),\n  carryForward: boolean(\"carry_forward\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const leaveBalances = pgTable(\"leave_balances\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  leaveTypeId: varchar(\"leave_type_id\").references(() => leaveTypes.id).notNull(),\n  totalDays: integer(\"total_days\").notNull(),\n  usedDays: integer(\"used_days\").default(0),\n  year: integer(\"year\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const leaves = pgTable(\"leaves\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  leaveTypeId: varchar(\"leave_type_id\").references(() => leaveTypes.id).notNull(),\n  fromDate: date(\"from_date\").notNull(),\n  toDate: date(\"to_date\").notNull(),\n  days: decimal(\"days\", { precision: 3, scale: 1 }).notNull(),\n  reason: text(\"reason\").notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, approved, rejected, cancelled\n  contactNumber: varchar(\"contact_number\"),\n  attachmentPath: varchar(\"attachment_path\"),\n  appliedAt: timestamp(\"applied_at\").defaultNow(),\n  reviewedAt: timestamp(\"reviewed_at\"),\n  reviewedBy: varchar(\"reviewed_by\").references(() => users.id),\n  reviewComments: text(\"review_comments\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const attendanceRecords = pgTable(\"attendance_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  date: date(\"date\").notNull(),\n  status: varchar(\"status\").notNull(), // present, absent, leave, wfh, holiday\n  checkIn: timestamp(\"check_in\"),\n  checkOut: timestamp(\"check_out\"),\n  workingHours: decimal(\"working_hours\", { precision: 4, scale: 2 }),\n  regularizedAt: timestamp(\"regularized_at\"),\n  regularizationReason: text(\"regularization_reason\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const salarySlips = pgTable(\"salary_slips\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  month: integer(\"month\").notNull(),\n  year: integer(\"year\").notNull(),\n  basicSalary: decimal(\"basic_salary\", { precision: 10, scale: 2 }).notNull(),\n  allowances: jsonb(\"allowances\"), // {\"hra\": 2000, \"transport\": 1000, etc.}\n  deductions: jsonb(\"deductions\"), // {\"tax\": 500, \"pf\": 1000, etc.}\n  grossSalary: decimal(\"gross_salary\", { precision: 10, scale: 2 }).notNull(),\n  netSalary: decimal(\"net_salary\", { precision: 10, scale: 2 }).notNull(),\n  paymentDate: date(\"payment_date\"),\n  filePath: varchar(\"file_path\"), // Path to PDF file\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const hrDocuments = pgTable(\"hr_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  category: varchar(\"category\").notNull(), // policy, handbook, benefits, etc.\n  filePath: varchar(\"file_path\").notNull(),\n  fileSize: integer(\"file_size\"),\n  mimeType: varchar(\"mime_type\"),\n  uploadedBy: varchar(\"uploaded_by\").references(() => users.id).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  vectorCount: integer(\"vector_count\").default(0),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const aiConversations = pgTable(\"ai_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  documentsUsed: text(\"documents_used\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  leaves: many(leaves),\n  leaveBalances: many(leaveBalances),\n  attendanceRecords: many(attendanceRecords),\n  salarySlips: many(salarySlips),\n  uploadedDocuments: many(hrDocuments),\n  aiConversations: many(aiConversations),\n}));\n\nexport const leaveTypesRelations = relations(leaveTypes, ({ many }) => ({\n  leaves: many(leaves),\n  leaveBalances: many(leaveBalances),\n}));\n\nexport const leavesRelations = relations(leaves, ({ one }) => ({\n  user: one(users, {\n    fields: [leaves.userId],\n    references: [users.id],\n  }),\n  leaveType: one(leaveTypes, {\n    fields: [leaves.leaveTypeId],\n    references: [leaveTypes.id],\n  }),\n  reviewer: one(users, {\n    fields: [leaves.reviewedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const leaveBalancesRelations = relations(leaveBalances, ({ one }) => ({\n  user: one(users, {\n    fields: [leaveBalances.userId],\n    references: [users.id],\n  }),\n  leaveType: one(leaveTypes, {\n    fields: [leaveBalances.leaveTypeId],\n    references: [leaveTypes.id],\n  }),\n}));\n\nexport const attendanceRecordsRelations = relations(attendanceRecords, ({ one }) => ({\n  user: one(users, {\n    fields: [attendanceRecords.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const salarySlipsRelations = relations(salarySlips, ({ one }) => ({\n  user: one(users, {\n    fields: [salarySlips.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const hrDocumentsRelations = relations(hrDocuments, ({ one }) => ({\n  uploadedBy: one(users, {\n    fields: [hrDocuments.uploadedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const aiConversationsRelations = relations(aiConversations, ({ one }) => ({\n  user: one(users, {\n    fields: [aiConversations.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  id: z.string().optional(),\n});\n\nexport const insertLeaveSchema = createInsertSchema(leaves).omit({\n  id: true,\n  appliedAt: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  fromDate: z.string(),\n  toDate: z.string(),\n});\n\nexport const insertAttendanceSchema = createInsertSchema(attendanceRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  date: z.string(),\n});\n\nexport const insertHrDocumentSchema = createInsertSchema(hrDocuments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiConversationSchema = createInsertSchema(aiConversations).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type LeaveType = typeof leaveTypes.$inferSelect;\nexport type LeaveBalance = typeof leaveBalances.$inferSelect;\nexport type Leave = typeof leaves.$inferSelect;\nexport type InsertLeave = z.infer<typeof insertLeaveSchema>;\nexport type AttendanceRecord = typeof attendanceRecords.$inferSelect;\nexport type InsertAttendanceRecord = z.infer<typeof insertAttendanceSchema>;\nexport type SalarySlip = typeof salarySlips.$inferSelect;\nexport type HrDocument = typeof hrDocuments.$inferSelect;\nexport type InsertHrDocument = z.infer<typeof insertHrDocumentSchema>;\nexport type AiConversation = typeof aiConversations.$inferSelect;\nexport type InsertAiConversation = z.infer<typeof insertAiConversationSchema>;\n","size_bytes":8823},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Layout } from \"@/components/Layout\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport ApplyLeave from \"@/pages/ApplyLeave\";\nimport RegularizeAttendance from \"@/pages/RegularizeAttendance\";\nimport LeaveSummary from \"@/pages/LeaveSummary\";\nimport AttendanceSummary from \"@/pages/AttendanceSummary\";\nimport LeaveCorrection from \"@/pages/LeaveCorrection\";\nimport SalarySlips from \"@/pages/SalarySlips\";\nimport AIAssistant from \"@/pages/AIAssistant\";\nimport Documents from \"@/pages/Documents\";\n\nconst pageConfig = {\n  \"/\": {\n    title: \"Dashboard\",\n    subtitle: \"Welcome back, manage your HR tasks efficiently\"\n  },\n  \"/apply-leave\": {\n    title: \"Apply Leave\", \n    subtitle: \"Submit a new leave request\"\n  },\n  \"/regularize\": {\n    title: \"Regularize Attendance\",\n    subtitle: \"Fix missed punches or mark work from home\"\n  },\n  \"/leave-summary\": {\n    title: \"Leave Summary\",\n    subtitle: \"View your leave balance and history\"\n  },\n  \"/attendance\": {\n    title: \"Attendance Summary\", \n    subtitle: \"Track your monthly attendance records\"\n  },\n  \"/leave-correction\": {\n    title: \"Leave Correction\",\n    subtitle: \"Edit or cancel your leave requests\"\n  },\n  \"/salary-slips\": {\n    title: \"Salary Slips\",\n    subtitle: \"View and download your salary slips\"\n  },\n  \"/ai-assistant\": {\n    title: \"AI HR Assistant\",\n    subtitle: \"Get instant answers to HR policy questions\"\n  },\n  \"/documents\": {\n    title: \"HR Documents\",\n    subtitle: \"Manage and upload HR policy documents\"\n  }\n};\n\nfunction AuthenticatedRoute({ \n  children, \n  path \n}: { \n  children: React.ReactNode;\n  path: string;\n}) {\n  const config = pageConfig[path as keyof typeof pageConfig] || {\n    title: \"HR Portal\",\n    subtitle: \"Employee Self Service\"\n  };\n\n  return (\n    <Layout title={config.title} subtitle={config.subtitle}>\n      {children}\n    </Layout>\n  );\n}\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\">\n            <AuthenticatedRoute path=\"/\">\n              <Dashboard />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/apply-leave\">\n            <AuthenticatedRoute path=\"/apply-leave\">\n              <ApplyLeave />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/regularize\">\n            <AuthenticatedRoute path=\"/regularize\">\n              <RegularizeAttendance />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/leave-summary\">\n            <AuthenticatedRoute path=\"/leave-summary\">\n              <LeaveSummary />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/attendance\">\n            <AuthenticatedRoute path=\"/attendance\">\n              <AttendanceSummary />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/leave-correction\">\n            <AuthenticatedRoute path=\"/leave-correction\">\n              <LeaveCorrection />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/salary-slips\">\n            <AuthenticatedRoute path=\"/salary-slips\">\n              <SalarySlips />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/ai-assistant\">\n            <AuthenticatedRoute path=\"/ai-assistant\">\n              <AIAssistant />\n            </AuthenticatedRoute>\n          </Route>\n          <Route path=\"/documents\">\n            <AuthenticatedRoute path=\"/documents\">\n              <Documents />\n            </AuthenticatedRoute>\n          </Route>\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4538},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210 40% 98%);\n  --foreground: hsl(222 47% 11%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 47% 11%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 47% 11%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(214 32% 91%);\n  --secondary-foreground: hsl(222 47% 11%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(142 71% 45%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(142 71% 45%);\n  --chart-3: hsl(42 92% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 47% 11%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(214 32% 91%);\n  --sidebar-accent-foreground: hsl(217 91% 60%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: \"Inter\", \"Open Sans\", ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px rgba(59, 130, 246, 0.05);\n  --shadow-xs: 0px 1px 2px 0px rgba(59, 130, 246, 0.05);\n  --shadow-sm: 0px 1px 3px 0px rgba(59, 130, 246, 0.1), 0px 1px 2px -1px rgba(59, 130, 246, 0.1);\n  --shadow: 0px 1px 3px 0px rgba(59, 130, 246, 0.1), 0px 1px 2px -1px rgba(59, 130, 246, 0.1);\n  --shadow-md: 0px 4px 6px -1px rgba(59, 130, 246, 0.1), 0px 2px 4px -2px rgba(59, 130, 246, 0.1);\n  --shadow-lg: 0px 10px 15px -3px rgba(59, 130, 246, 0.1), 0px 4px 6px -4px rgba(59, 130, 246, 0.1);\n  --shadow-xl: 0px 20px 25px -5px rgba(59, 130, 246, 0.1), 0px 8px 10px -6px rgba(59, 130, 246, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px rgba(59, 130, 246, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222 47% 11%);\n  --foreground: hsl(210 40% 98%);\n  --card: hsl(224 71% 4%);\n  --card-foreground: hsl(210 40% 98%);\n  --popover: hsl(224 71% 4%);\n  --popover-foreground: hsl(210 40% 98%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(222 47% 11%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(210 40% 98%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(142 71% 45%);\n  --accent-foreground: hsl(210 40% 98%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(210 40% 98%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(142 71% 45%);\n  --chart-3: hsl(42 92% 56%);\n  --chart-4: hsl(147 79% 42%);\n  --chart-5: hsl(341 75% 51%);\n  --sidebar: hsl(224 71% 4%);\n  --sidebar-foreground: hsl(210 40% 98%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(222 47% 11%);\n  --sidebar-accent: hsl(217 32% 17%);\n  --sidebar-accent-foreground: hsl(217 91% 60%);\n  --sidebar-border: hsl(217 32% 17%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: \"Inter\", \"Open Sans\", ui-sans-serif, system-ui;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow-md: 0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -2px rgba(0, 0, 0, 0.1);\n  --shadow-lg: 0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -4px rgba(0, 0, 0, 0.1);\n  --shadow-xl: 0px 20px 25px -5px rgba(0, 0, 0, 0.1), 0px 8px 10px -6px rgba(0, 0, 0, 0.1);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', ui-sans-serif, system-ui;\n  }\n}\n\n/* Custom component styles matching the design reference */\n.stat-card {\n  transition: all 0.3s ease;\n}\n\n.stat-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 12px 24px -10px rgba(0, 0, 0, 0.15);\n}\n\n.table-row:hover {\n  background-color: hsl(var(--muted));\n}\n\n.form-input:focus {\n  border-color: hsl(var(--ring));\n  box-shadow: 0 0 0 3px hsl(var(--ring) / 0.1);\n}\n\n.btn-primary {\n  background-color: hsl(var(--primary));\n  color: hsl(var(--primary-foreground));\n  transition: all 0.2s ease;\n}\n\n.btn-primary:hover {\n  background-color: hsl(217 91% 50%);\n  box-shadow: 0 4px 12px -2px rgba(59, 130, 246, 0.5);\n}\n\n.btn-secondary {\n  background-color: hsl(var(--secondary));\n  color: hsl(var(--secondary-foreground));\n  transition: all 0.2s ease;\n}\n\n.btn-secondary:hover {\n  background-color: hsl(214 32% 85%);\n}\n\n.file-upload-area {\n  transition: all 0.3s ease;\n}\n\n.file-upload-area:hover {\n  border-color: hsl(var(--primary));\n  background-color: hsl(var(--primary) / 0.05);\n}\n\n.chat-message {\n  animation: slideIn 0.3s ease-out;\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Uppy dashboard styles override */\n.uppy-Dashboard-inner {\n  border-radius: var(--radius) !important;\n}\n\n.uppy-Dashboard-AddFiles {\n  border-color: hsl(var(--border)) !important;\n}\n\n.uppy-Dashboard-AddFiles:hover {\n  border-color: hsl(var(--primary)) !important;\n}\n\n.uppy-c-btn--primary {\n  background-color: hsl(var(--primary)) !important;\n  color: hsl(var(--primary-foreground)) !important;\n}\n\n.uppy-c-btn--primary:hover {\n  background-color: hsl(217 91% 50%) !important;\n}\n\n/* Scrollbar styling */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground) / 0.5);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.7);\n}\n","size_bytes":6251},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Header.tsx":{"content":"import { Bell, Settings } from \"lucide-react\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle: string;\n}\n\nexport function Header({ title, subtitle }: HeaderProps) {\n  return (\n    <header className=\"sticky top-0 z-30 bg-card border-b border-border backdrop-blur-sm bg-opacity-95\">\n      <div className=\"flex items-center justify-between px-8 py-4\">\n        <div className=\"flex items-center gap-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-foreground\">{title}</h2>\n            <p className=\"text-sm text-muted-foreground\">{subtitle}</p>\n          </div>\n        </div>\n        <div className=\"flex items-center gap-4\">\n          <button className=\"relative p-2 hover:bg-muted rounded-lg transition-colors\">\n            <Bell className=\"w-5 h-5 text-muted-foreground\" />\n            <span className=\"absolute top-1 right-1 w-2 h-2 bg-destructive rounded-full\"></span>\n          </button>\n          <button className=\"flex items-center gap-2 px-4 py-2 hover:bg-muted rounded-lg transition-colors\">\n            <Settings className=\"w-4 h-4 text-muted-foreground\" />\n          </button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1164},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Sidebar } from \"./Sidebar\";\nimport { Header } from \"./Header\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  title: string;\n  subtitle: string;\n}\n\nexport function Layout({ children, title, subtitle }: LayoutProps) {\n  return (\n    <div className=\"flex min-h-screen bg-background\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Header title={title} subtitle={subtitle} />\n        <main className=\"p-8\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":536},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2782},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Home, \n  CalendarPlus, \n  ClockArrowUp, \n  PieChart, \n  CalendarCheck, \n  Edit, \n  FileText, \n  Bot, \n  FolderOpen,\n  Briefcase,\n  MoreVertical\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: Home },\n  { name: \"Apply Leave\", href: \"/apply-leave\", icon: CalendarPlus },\n  { name: \"Regularize Attendance\", href: \"/regularize\", icon: ClockArrowUp },\n  { name: \"Leave Summary\", href: \"/leave-summary\", icon: PieChart },\n  { name: \"Attendance Summary\", href: \"/attendance\", icon: CalendarCheck },\n  { name: \"Leave Correction\", href: \"/leave-correction\", icon: Edit },\n  { name: \"Salary Slips\", href: \"/salary-slips\", icon: FileText },\n  { name: \"AI HR Assistant\", href: \"/ai-assistant\", icon: Bot },\n  { name: \"HR Documents\", href: \"/documents\", icon: FolderOpen },\n];\n\nexport function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  return (\n    <aside className=\"fixed left-0 top-0 h-screen w-64 bg-card border-r border-border z-40\">\n      <div className=\"flex flex-col h-full\">\n        {/* Logo */}\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 rounded-lg bg-primary flex items-center justify-center\">\n              <Briefcase className=\"text-primary-foreground text-lg\" />\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold text-foreground\">HR Portal</h1>\n              <p className=\"text-xs text-muted-foreground\">Employee Self Service</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 overflow-y-auto p-4\">\n          <ul className=\"space-y-1\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              \n              return (\n                <li key={item.name}>\n                  <Link href={item.href}>\n                    <a \n                      className={`flex items-center gap-3 px-4 py-3 rounded-lg transition-colors ${\n                        isActive \n                          ? \"bg-primary/10 text-primary border-l-3 border-primary\" \n                          : \"hover:bg-muted text-foreground\"\n                      }`}\n                    >\n                      <Icon className=\"w-5 h-5\" />\n                      <span className=\"font-medium\">{item.name}</span>\n                    </a>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n\n        {/* User Profile */}\n        <div className=\"p-4 border-t border-border\">\n          <div className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-muted transition-colors cursor-pointer\">\n            <div className=\"w-10 h-10 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-semibold text-sm\">\n              {user?.firstName?.[0]}{user?.lastName?.[0]}\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"font-medium text-sm text-foreground\">\n                {user?.firstName} {user?.lastName}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {user?.employeeId}\n              </p>\n            </div>\n            <MoreVertical className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3533},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AIAssistant.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Bot, Send, Paperclip, FileText, TrendingUp, Clock, Award } from \"lucide-react\";\n\ninterface Message {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  documentsUsed?: string[];\n}\n\nexport default function AIAssistant() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      type: 'assistant',\n      content: \"Hello! I'm your AI HR Assistant. I can help you with questions about leave policies, benefits, attendance, salary, and other HR-related topics. What would you like to know?\",\n      timestamp: new Date(),\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: documents } = useQuery({\n    queryKey: ['/api/hr-documents'],\n    retry: false,\n  });\n\n  const askAIMutation = useMutation({\n    mutationFn: async (question: string) => {\n      const response = await apiRequest('POST', '/api/ai/ask', { question });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to get AI response');\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      const assistantMessage: Message = {\n        id: Date.now().toString(),\n        type: 'assistant',\n        content: data.answer,\n        timestamp: new Date(),\n        documentsUsed: data.documentsUsed\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!inputMessage.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage.trim(),\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    askAIMutation.mutate(inputMessage.trim());\n    setInputMessage(\"\");\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const suggestedQuestions = [\n    \"What are the leave encashment rules?\",\n    \"How do I apply for maternity leave?\", \n    \"What benefits am I eligible for?\",\n    \"How is overtime calculated?\",\n    \"What is the notice period policy?\"\n  ];\n\n  const handleSuggestedQuestion = (question: string) => {\n    setInputMessage(question);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* Chat Interface */}\n      <div className=\"lg:col-span-2\">\n        <Card className=\"flex flex-col h-[calc(100vh-12rem)]\">\n          {/* Chat Header */}\n          <CardHeader className=\"border-b border-border\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-primary to-purple-500 flex items-center justify-center\">\n                <Bot className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-lg\">AI HR Assistant</CardTitle>\n                <p className=\"text-sm text-muted-foreground\">Ask me anything about HR policies</p>\n              </div>\n            </div>\n          </CardHeader>\n\n          {/* Chat Messages */}\n          <div className=\"flex-1 overflow-y-auto p-6 space-y-4\" data-testid=\"chat-messages\">\n            {messages.map((message) => (\n              <div \n                key={message.id}\n                className={`flex items-start gap-3 animate-in slide-in-from-bottom-2 duration-300 ${\n                  message.type === 'user' ? 'justify-end' : ''\n                }`}\n              >\n                {message.type === 'assistant' && (\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-primary to-purple-500 flex items-center justify-center flex-shrink-0\">\n                    <Bot className=\"w-4 h-4 text-white\" />\n                  </div>\n                )}\n                <div \n                  className={`rounded-2xl p-4 max-w-md ${\n                    message.type === 'user' \n                      ? 'bg-primary text-primary-foreground rounded-tr-none ml-auto' \n                      : 'bg-muted text-foreground rounded-tl-none'\n                  }`}\n                >\n                  <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                  {message.documentsUsed && message.documentsUsed.length > 0 && (\n                    <div className=\"mt-3 pt-3 border-t border-border\">\n                      <p className=\"text-xs text-muted-foreground mb-2\">Referenced documents:</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {message.documentsUsed.map((doc, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {doc}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {message.type === 'user' && (\n                  <div className=\"w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center flex-shrink-0 font-semibold text-sm\">\n                    {user?.firstName?.[0]}{user?.lastName?.[0]}\n                  </div>\n                )}\n              </div>\n            ))}\n            {askAIMutation.isPending && (\n              <div className=\"flex items-start gap-3 animate-pulse\">\n                <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-primary to-purple-500 flex items-center justify-center flex-shrink-0\">\n                  <Bot className=\"w-4 h-4 text-white\" />\n                </div>\n                <div className=\"bg-muted rounded-2xl rounded-tl-none p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-2 h-2 bg-foreground rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Chat Input */}\n          <div className=\"p-6 border-t border-border\">\n            <div className=\"flex items-end gap-3\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-3\">\n                <Paperclip className=\"w-4 h-4 text-muted-foreground\" />\n              </Button>\n              <div className=\"flex-1 relative\">\n                <Textarea\n                  value={inputMessage}\n                  onChange={(e) => setInputMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  placeholder=\"Ask me anything about HR policies...\"\n                  className=\"resize-none min-h-12 max-h-32 pr-12\"\n                  rows={1}\n                  data-testid=\"chat-input\"\n                />\n              </div>\n              <Button \n                onClick={handleSendMessage}\n                disabled={!inputMessage.trim() || askAIMutation.isPending}\n                className=\"px-3\"\n                data-testid=\"send-message-button\"\n              >\n                <Send className=\"w-4 h-4\" />\n              </Button>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-2\">\n              AI responses are based on uploaded HR documents and may not be 100% accurate. Please verify critical information.\n            </p>\n          </div>\n        </Card>\n      </div>\n\n      {/* Suggested Questions & Context */}\n      <div className=\"lg:col-span-1 space-y-6\">\n        {/* Suggested Questions */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Suggested Questions</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            {suggestedQuestions.map((question, index) => (\n              <Button\n                key={index}\n                variant=\"ghost\"\n                className=\"w-full text-left justify-start p-3 h-auto text-wrap\"\n                onClick={() => handleSuggestedQuestion(question)}\n                data-testid={`suggested-question-${index}`}\n              >\n                <div className=\"flex items-start gap-2 w-full\">\n                  <div className=\"w-5 h-5 rounded bg-primary/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-primary text-xs\">?</span>\n                  </div>\n                  <span className=\"text-sm text-left\">{question}</span>\n                </div>\n              </Button>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Active Documents */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">Knowledge Base</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {documents && documents.length > 0 ? (\n              documents.slice(0, 5).map((doc: any) => (\n                <div key={doc.id} className=\"flex items-center gap-3 p-3 bg-muted rounded-lg\">\n                  <FileText className=\"w-5 h-5 text-destructive flex-shrink-0\" />\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm font-medium text-foreground truncate\">{doc.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {doc.category} • {doc.vectorCount || 0} vectors\n                    </p>\n                  </div>\n                  {doc.isActive && (\n                    <div className=\"w-2 h-2 rounded-full bg-accent flex-shrink-0\" />\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-4\">\n                <FileText className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <p className=\"text-sm text-muted-foreground\">No documents uploaded yet</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* AI Stats */}\n        <div className=\"bg-gradient-to-br from-primary to-purple-500 rounded-xl p-6 text-white\">\n          <h4 className=\"font-semibold mb-4\">AI Assistant Stats</h4>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-4 h-4\" />\n                <span className=\"text-sm opacity-90\">Questions Today:</span>\n              </div>\n              <span className=\"font-bold\">{messages.filter(m => m.type === 'user').length}</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-4 h-4\" />\n                <span className=\"text-sm opacity-90\">Avg Response Time:</span>\n              </div>\n              <span className=\"font-bold\">1.2s</span>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center gap-2\">\n                <Award className=\"w-4 h-4\" />\n                <span className=\"text-sm opacity-90\">Accuracy Rate:</span>\n              </div>\n              <span className=\"font-bold\">94%</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12607},"client/src/pages/ApplyLeave.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertLeaveSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Send, Upload } from \"lucide-react\";\n\nconst applyLeaveSchema = insertLeaveSchema.omit({\n  userId: true,\n}).extend({\n  contactNumber: z.string().optional(),\n  isHalfDay: z.boolean().optional(),\n  reason: z.string().min(10, \"Reason must be at least 10 characters\"),\n});\n\ntype ApplyLeaveForm = z.infer<typeof applyLeaveSchema>;\n\nexport default function ApplyLeave() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isHalfDay, setIsHalfDay] = useState(false);\n\n  const form = useForm<ApplyLeaveForm>({\n    resolver: zodResolver(applyLeaveSchema),\n    defaultValues: {\n      leaveTypeId: \"\",\n      fromDate: \"\",\n      toDate: \"\",\n      reason: \"\",\n      contactNumber: \"\",\n      isHalfDay: false,\n    },\n  });\n\n  const { data: leaveTypes = [] } = useQuery<any[]>({\n    queryKey: ['/api/leave-types'],\n  });\n\n  const { data: leaveBalances = [] } = useQuery<any[]>({\n    queryKey: ['/api/leave-balances'],\n  });\n\n  const applyLeaveMutation = useMutation({\n    mutationFn: async (data: ApplyLeaveForm) => {\n      const response = await apiRequest('POST', '/api/leaves', data);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to submit leave request');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Leave Applied\",\n        description: \"Your leave request has been submitted successfully.\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/leaves'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: ApplyLeaveForm) => {\n    const { isHalfDay, ...leaveData } = data;\n    applyLeaveMutation.mutate(leaveData);\n  };\n\n  const calculateDays = () => {\n    const fromDate = form.getValues(\"fromDate\");\n    const toDate = form.getValues(\"toDate\");\n    \n    if (fromDate && toDate) {\n      const from = new Date(fromDate);\n      const to = new Date(toDate);\n      const timeDiff = to.getTime() - from.getTime();\n      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;\n      return isHalfDay ? 0.5 : daysDiff;\n    }\n    return 0;\n  };\n\n  const days = calculateDays();\n\n  return (\n    <div className=\"max-w-4xl\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl\">Apply for Leave</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Leave Type */}\n              <FormField\n                control={form.control}\n                name=\"leaveTypeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Leave Type <span className=\"text-destructive\">*</span></FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select leave type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {leaveTypes?.map((type: any) => {\n                          const balance = leaveBalances?.find((b: any) => b.leaveTypeId === type.id);\n                          const remaining = balance ? balance.totalDays - balance.usedDays : 0;\n                          return (\n                            <SelectItem key={type.id} value={type.id}>\n                              {type.name} ({remaining} remaining)\n                            </SelectItem>\n                          );\n                        })}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Date Range */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"fromDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>From Date <span className=\"text-destructive\">*</span></FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"toDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>To Date <span className=\"text-destructive\">*</span></FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Half Day Option */}\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"half-day\" \n                  checked={isHalfDay}\n                  onCheckedChange={(checked) => setIsHalfDay(checked === true)}\n                  data-testid=\"checkbox-half-day\"\n                />\n                <Label htmlFor=\"half-day\" className=\"text-sm cursor-pointer\">\n                  This is a half-day leave\n                </Label>\n              </div>\n\n              {/* Reason */}\n              <FormField\n                control={form.control}\n                name=\"reason\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Reason <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        rows={4} \n                        placeholder=\"Please provide a reason for your leave...\"\n                        className=\"resize-none\"\n                      />\n                    </FormControl>\n                    <p className=\"text-xs text-muted-foreground\">Minimum 10 characters required</p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Contact Number */}\n              <FormField\n                control={form.control}\n                name=\"contactNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Contact Number During Leave</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"tel\" \n                        placeholder=\"+1 (555) 000-0000\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Leave Summary */}\n              <Card className=\"bg-muted/50\">\n                <CardContent className=\"pt-4\">\n                  <h4 className=\"font-semibold text-foreground mb-3\">Leave Summary</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Total Days:</span>\n                      <span className=\"font-medium text-foreground\">{days}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Working Days:</span>\n                      <span className=\"font-medium text-foreground\">{days}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Actions */}\n              <div className=\"flex items-center gap-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={applyLeaveMutation.isPending}\n                  className=\"px-6\"\n                  data-testid=\"button-submit-leave\"\n                >\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  {applyLeaveMutation.isPending ? \"Submitting...\" : \"Submit Leave Request\"}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  onClick={() => form.reset()}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9730},"client/src/pages/AttendanceSummary.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { CheckCircle, XCircle, Umbrella, Home, Download, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function AttendanceSummary() {\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n\n  const { data: attendanceData, isLoading } = useQuery({\n    queryKey: ['/api/attendance', { month: selectedMonth, year: selectedYear }],\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'present':\n        return <CheckCircle className=\"w-5 h-5 text-accent\" />;\n      case 'absent':\n        return <XCircle className=\"w-5 h-5 text-destructive\" />;\n      case 'leave':\n        return <Umbrella className=\"w-5 h-5 text-primary\" />;\n      case 'wfh':\n        return <Home className=\"w-5 h-5 text-blue-500\" />;\n      default:\n        return <Calendar className=\"w-5 h-5 text-muted-foreground\" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const styles = {\n      present: \"bg-accent/10 text-accent\",\n      absent: \"bg-destructive/10 text-destructive\", \n      leave: \"bg-primary/10 text-primary\",\n      wfh: \"bg-blue-500/10 text-blue-500\",\n      holiday: \"bg-purple-500/10 text-purple-500\"\n    };\n    \n    return styles[status as keyof typeof styles] || \"bg-muted text-muted-foreground\";\n  };\n\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"animate-pulse\">\n          <CardContent className=\"p-6\">\n            <div className=\"h-32 bg-muted rounded\"></div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const records = attendanceData?.records || [];\n  const stats = attendanceData?.stats || { present: 0, absent: 0, leave: 0, wfh: 0 };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Month Selector */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between flex-wrap gap-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground\">Attendance Summary</h3>\n              <p className=\"text-sm text-muted-foreground\">View your monthly attendance records</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Select \n                value={selectedMonth.toString()} \n                onValueChange={(value) => setSelectedMonth(parseInt(value))}\n              >\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {months.map((month, index) => (\n                    <SelectItem key={index} value={(index + 1).toString()}>\n                      {month}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select \n                value={selectedYear.toString()}\n                onValueChange={(value) => setSelectedYear(parseInt(value))}\n              >\n                <SelectTrigger className=\"w-20\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"2024\">2024</SelectItem>\n                  <SelectItem value=\"2023\">2023</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button className=\"px-4\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"w-10 h-10 rounded-lg bg-accent/10 flex items-center justify-center\">\n                <CheckCircle className=\"w-5 h-5 text-accent\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\">{stats.present}</p>\n                <p className=\"text-xs text-muted-foreground\">Present</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"w-10 h-10 rounded-lg bg-destructive/10 flex items-center justify-center\">\n                <XCircle className=\"w-5 h-5 text-destructive\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\">{stats.absent}</p>\n                <p className=\"text-xs text-muted-foreground\">Absent</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Umbrella className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\">{stats.leave}</p>\n                <p className=\"text-xs text-muted-foreground\">On Leave</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"w-10 h-10 rounded-lg bg-blue-500/10 flex items-center justify-center\">\n                <Home className=\"w-5 h-5 text-blue-500\" />\n              </div>\n              <div>\n                <p className=\"text-2xl font-bold text-foreground\">{stats.wfh}</p>\n                <p className=\"text-xs text-muted-foreground\">Work From Home</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Attendance Records Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Daily Attendance Records</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {records.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Day</TableHead>\n                    <TableHead>Check In</TableHead>\n                    <TableHead>Check Out</TableHead>\n                    <TableHead>Hours</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {records.map((record: any) => (\n                    <TableRow key={record.id} className=\"hover:bg-muted/50\">\n                      <TableCell className=\"font-medium\">\n                        {format(new Date(record.date), \"MMM dd, yyyy\")}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {format(new Date(record.date), \"EEEE\")}\n                      </TableCell>\n                      <TableCell>\n                        {record.checkIn ? format(new Date(record.checkIn), \"hh:mm a\") : \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        {record.checkOut ? format(new Date(record.checkOut), \"hh:mm a\") : \"-\"}\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        {record.workingHours || \"-\"}\n                      </TableCell>\n                      <TableCell>\n                        <Badge className={getStatusBadge(record.status)}>\n                          <div className=\"flex items-center gap-1\">\n                            {getStatusIcon(record.status)}\n                            <span className=\"capitalize\">{record.status}</span>\n                          </div>\n                        </Badge>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n              <p className=\"text-muted-foreground\">No attendance records found for this period</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9272},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Calendar, Clock, FileText, Bot, TrendingUp, CheckCircle, AlertCircle, Users } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const quickActions = [\n    { \n      title: \"Apply for Leave\", \n      description: \"Submit new leave request\",\n      icon: Calendar,\n      href: \"/apply-leave\",\n      color: \"bg-primary/10 text-primary\"\n    },\n    { \n      title: \"Regularize Attendance\", \n      description: \"Fix missed punches\",\n      icon: Clock,\n      href: \"/regularize\",\n      color: \"bg-accent/10 text-accent\"\n    },\n    { \n      title: \"Ask AI Assistant\", \n      description: \"HR policy questions\",\n      icon: Bot,\n      href: \"/ai-assistant\",\n      color: \"bg-purple-500/10 text-purple-500\"\n    },\n    { \n      title: \"View Salary Slips\", \n      description: \"Download pay stubs\",\n      icon: FileText,\n      href: \"/salary-slips\",\n      color: \"bg-blue-500/10 text-blue-500\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"p-3 rounded-lg bg-primary/10\">\n                <Calendar className=\"w-6 h-6 text-primary\" />\n              </div>\n              <span className=\"text-xs font-medium px-2 py-1 rounded-full bg-accent/10 text-accent\">This Year</span>\n            </div>\n            <h3 className=\"text-3xl font-bold text-foreground mb-1\">\n              {stats?.leavesUsed || 0}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Leaves Taken</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"p-3 rounded-lg bg-accent/10\">\n                <TrendingUp className=\"w-6 h-6 text-accent\" />\n              </div>\n              <span className=\"text-xs font-medium px-2 py-1 rounded-full bg-primary/10 text-primary\">Available</span>\n            </div>\n            <h3 className=\"text-3xl font-bold text-foreground mb-1\">\n              {stats?.leavesRemaining || 0}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Leaves Remaining</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"p-3 rounded-lg bg-blue-500/10\">\n                <CheckCircle className=\"w-6 h-6 text-blue-500\" />\n              </div>\n              <span className=\"text-xs font-medium px-2 py-1 rounded-full bg-blue-500/10 text-blue-500\">This Month</span>\n            </div>\n            <h3 className=\"text-3xl font-bold text-foreground mb-1\">\n              {stats?.attendanceRate || 0}%\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Attendance Rate</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between mb-4\">\n              <div className=\"p-3 rounded-lg bg-amber-500/10\">\n                <AlertCircle className=\"w-6 h-6 text-amber-500\" />\n              </div>\n              <span className=\"text-xs font-medium px-2 py-1 rounded-full bg-amber-500/10 text-amber-500\">Pending</span>\n            </div>\n            <h3 className=\"text-3xl font-bold text-foreground mb-1\">\n              {stats?.pendingRequests || 0}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\">Pending Requests</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Quick Actions */}\n        <div className=\"lg:col-span-1\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {quickActions.map((action, index) => {\n                const Icon = action.icon;\n                return (\n                  <Link key={index} href={action.href}>\n                    <Button variant=\"ghost\" className=\"w-full justify-start p-3 h-auto\">\n                      <div className={`w-10 h-10 rounded-lg ${action.color} flex items-center justify-center mr-3`}>\n                        <Icon className=\"w-5 h-5\" />\n                      </div>\n                      <div className=\"text-left\">\n                        <p className=\"font-medium text-sm\">{action.title}</p>\n                        <p className=\"text-xs text-muted-foreground\">{action.description}</p>\n                      </div>\n                    </Button>\n                  </Link>\n                );\n              })}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Leave Balance Overview */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Leave Balance Overview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {stats?.leaveBalances?.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {stats.leaveBalances.map((balance: any, index: number) => (\n                    <div key={index} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          {balance.type === 'casual' ? 'Casual Leave' :\n                           balance.type === 'sick' ? 'Sick Leave' :\n                           balance.type === 'earned' ? 'Earned Leave' : balance.type}\n                        </span>\n                        <span className=\"text-sm font-semibold\">\n                          {balance.used}/{balance.total}\n                        </span>\n                      </div>\n                      <Progress \n                        value={(balance.used / balance.total) * 100} \n                        className=\"h-2\"\n                      />\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                  <p className=\"text-muted-foreground\">No leave balance data available</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7568},"client/src/pages/Documents.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  CloudUpload, \n  FileText, \n  Search, \n  Download, \n  Trash2, \n  CheckCircle, \n  Loader, \n  X,\n  Folder,\n  BarChart3,\n  Clock,\n  Target\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function Documents() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({});\n\n  interface HRDocument {\n    id: string;\n    name: string;\n    category: string;\n    filePath: string;\n    fileSize: number;\n    mimeType: string;\n    uploadedBy: string;\n    isActive: boolean;\n    vectorCount: number;\n    createdAt: string;\n  }\n\n  const { data: documents = [], isLoading } = useQuery<HRDocument[]>({\n    queryKey: ['/api/hr-documents'],\n    retry: false,\n  });\n\n  const deleteDocumentMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('DELETE', `/api/hr-documents/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Document Deleted\",\n        description: \"The document has been removed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/hr-documents'] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadDocumentMutation = useMutation({\n    mutationFn: async ({ file, category }: { file: File; category: string }) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('category', category);\n      \n      const response = await fetch('/api/hr-documents/upload', {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Upload Complete\",\n        description: `${variables.file.name} has been processed and added to the knowledge base.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/hr-documents'] });\n    },\n    onError: (error: Error, variables) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    for (const file of Array.from(files)) {\n      const fileId = file.name;\n      setUploadProgress(prev => ({ ...prev, [fileId]: 0 }));\n      \n      let progressInterval: NodeJS.Timeout | null = null;\n      \n      try {\n        // Show progress\n        progressInterval = setInterval(() => {\n          setUploadProgress(prev => {\n            const currentProgress = prev[fileId] || 0;\n            if (currentProgress >= 90) {\n              if (progressInterval) clearInterval(progressInterval);\n              return prev;\n            }\n            return { ...prev, [fileId]: Math.min(currentProgress + 10, 90) };\n          });\n        }, 200);\n\n        // Upload to backend\n        await uploadDocumentMutation.mutateAsync({\n          file,\n          category: 'policy',\n        });\n\n        if (progressInterval) clearInterval(progressInterval);\n        setUploadProgress(prev => ({ ...prev, [fileId]: 100 }));\n        \n        // Clear progress after 2 seconds\n        setTimeout(() => {\n          setUploadProgress(prev => {\n            const newProgress = { ...prev };\n            delete newProgress[fileId];\n            return newProgress;\n          });\n        }, 2000);\n      } catch (error) {\n        if (progressInterval) clearInterval(progressInterval);\n        setUploadProgress(prev => {\n          const newProgress = { ...prev };\n          delete newProgress[fileId];\n          return newProgress;\n        });\n      }\n    }\n    \n    // Reset the input\n    event.target.value = '';\n  };\n\n  const filteredDocuments = documents.filter((doc) => {\n    const matchesSearch = doc.name.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || doc.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const getStatusBadge = (doc: HRDocument) => {\n    if (!doc.isActive) {\n      return <Badge variant=\"secondary\">Inactive</Badge>;\n    }\n    if (doc.vectorCount > 0) {\n      return <Badge className=\"bg-accent/10 text-accent\">Active</Badge>;\n    }\n    return <Badge className=\"bg-amber-500/10 text-amber-500\">Processing</Badge>;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'policy':\n        return <FileText className=\"w-4 h-4 text-primary\" />;\n      case 'benefits':\n        return <Target className=\"w-4 h-4 text-blue-500\" />;\n      case 'handbook':\n        return <Folder className=\"w-4 h-4 text-accent\" />;\n      default:\n        return <FileText className=\"w-4 h-4 text-muted-foreground\" />;\n    }\n  };\n\n  // Calculate total vectors for display\n  const totalVectors = documents.reduce((sum, doc) => sum + (doc.vectorCount || 0), 0);\n  const totalDocuments = documents.length;\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"animate-pulse\">\n          <CardContent className=\"p-8\">\n            <div className=\"h-32 bg-muted rounded\"></div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Upload Area */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Upload HR Documents</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Upload policy documents, handbooks, and benefit guides to enhance AI assistant's knowledge\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border-2 border-dashed border-input rounded-xl p-12 text-center hover:border-primary/50 hover:bg-primary/5 transition-colors\">\n            <div className=\"max-w-md mx-auto\">\n              <div className=\"w-20 h-20 mx-auto mb-4 rounded-full bg-primary/10 flex items-center justify-center\">\n                <CloudUpload className=\"w-10 h-10 text-primary\" />\n              </div>\n              <h4 className=\"text-lg font-semibold text-foreground mb-2\">Upload HR Documents</h4>\n              <p className=\"text-sm text-muted-foreground mb-4\">Select files to upload to the knowledge base</p>\n              <input\n                type=\"file\"\n                multiple\n                accept=\".pdf,.docx,.txt\"\n                onChange={handleFileChange}\n                className=\"hidden\"\n                id=\"file-upload\"\n                data-testid=\"input-file-upload\"\n              />\n              <Button\n                onClick={() => document.getElementById('file-upload')?.click()}\n                className=\"px-6 py-3 mb-4\"\n                data-testid=\"button-choose-files\"\n              >\n                <Folder className=\"w-4 h-4 mr-2\" />\n                Choose Files\n              </Button>\n              <p className=\"text-xs text-muted-foreground\">\n                Supported formats: PDF, DOCX, TXT • Max file size: 50MB\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Document Processing Status */}\n      {Object.keys(uploadProgress).length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Processing Documents</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            {Object.entries(uploadProgress).map(([fileName, progress]) => (\n              <div key={fileName} className=\"flex items-center gap-4 p-4 bg-muted rounded-lg\">\n                <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                  {progress < 100 ? (\n                    <Loader className=\"w-6 h-6 text-primary animate-spin\" />\n                  ) : (\n                    <CheckCircle className=\"w-6 h-6 text-accent\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium text-foreground mb-1\">{fileName}</p>\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"flex-1\">\n                      <Progress value={progress} className=\"h-2\" />\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\">{Math.round(progress)}%</span>\n                  </div>\n                  {progress >= 100 && (\n                    <p className=\"text-xs text-accent mt-1\">✓ Processing complete - Added to knowledge base</p>\n                  )}\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Document Library */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg\">Document Library</CardTitle>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search documents...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                  data-testid=\"search-documents\"\n                />\n              </div>\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"policy\">Policies</SelectItem>\n                  <SelectItem value=\"benefits\">Benefits</SelectItem>\n                  <SelectItem value=\"handbook\">Handbooks</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {filteredDocuments.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Document Name</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Size</TableHead>\n                    <TableHead>Uploaded</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredDocuments.map((doc) => (\n                    <TableRow key={doc.id} className=\"hover:bg-muted/50\" data-testid={`document-row-${doc.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center gap-3\">\n                          <FileText className=\"w-5 h-5 text-destructive\" />\n                          <span className=\"font-medium\">{doc.name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          {getCategoryIcon(doc.category)}\n                          <Badge \n                            variant=\"secondary\"\n                            className={\n                              doc.category === 'policy' ? 'bg-primary/10 text-primary' :\n                              doc.category === 'benefits' ? 'bg-blue-500/10 text-blue-500' :\n                              doc.category === 'handbook' ? 'bg-accent/10 text-accent' :\n                              'bg-muted text-muted-foreground'\n                            }\n                          >\n                            {doc.category}\n                          </Badge>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {doc.fileSize ? `${(doc.fileSize / 1024 / 1024).toFixed(1)} MB` : 'Unknown'}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {format(new Date(doc.createdAt), \"MMM dd, yyyy\")}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(doc)}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            className=\"text-primary hover:text-primary/80\"\n                            data-testid={`download-document-${doc.id}`}\n                          >\n                            <Download className=\"w-4 h-4 mr-1\" />\n                            Download\n                          </Button>\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\"\n                            className=\"text-destructive hover:text-destructive/80\"\n                            onClick={() => deleteDocumentMutation.mutate(doc.id)}\n                            disabled={deleteDocumentMutation.isPending}\n                            data-testid={`delete-document-${doc.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n              <p className=\"text-muted-foreground\">\n                {searchTerm || selectedCategory !== \"all\" \n                  ? \"No documents found matching your criteria\" \n                  : \"No documents uploaded yet\"}\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Vector Storage Info */}\n      <div className=\"bg-gradient-to-br from-purple-500 to-purple-700 rounded-xl p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h4 className=\"font-semibold mb-2\">AI Knowledge Base Status</h4>\n            <p className=\"text-sm opacity-90\">Vector embeddings stored for intelligent document search</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-4xl font-bold mb-1\">{totalVectors.toLocaleString()}</p>\n            <p className=\"text-sm opacity-90\">vectors</p>\n          </div>\n        </div>\n        <div className=\"mt-4 pt-4 border-t border-white/20\">\n          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <FileText className=\"w-4 h-4\" />\n              <div>\n                <p className=\"opacity-75\">Documents</p>\n                <p className=\"font-bold text-lg\">{totalDocuments}</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"w-4 h-4\" />\n              <div>\n                <p className=\"opacity-75\">Avg. Response</p>\n                <p className=\"font-bold text-lg\">0.8s</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              <div>\n                <p className=\"opacity-75\">Accuracy</p>\n                <p className=\"font-bold text-lg\">96%</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17452},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Briefcase, Calendar, Clock, Bot, FileText, PieChart } from \"lucide-react\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: Calendar,\n      title: \"Leave Management\",\n      description: \"Apply for leaves, track balances, and manage requests easily\"\n    },\n    {\n      icon: Clock,\n      title: \"Attendance Tracking\",\n      description: \"View attendance records and regularize missed punches\"\n    },\n    {\n      icon: FileText,\n      title: \"Salary Slips\",\n      description: \"Access and download your salary slips anytime\"\n    },\n    {\n      icon: Bot,\n      title: \"AI HR Assistant\",\n      description: \"Get instant answers to HR policy questions\"\n    },\n    {\n      icon: PieChart,\n      title: \"Analytics Dashboard\",\n      description: \"Track your HR metrics with comprehensive dashboards\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 to-accent/5\">\n      <div className=\"container mx-auto px-4 py-16\">\n        {/* Hero Section */}\n        <div className=\"text-center mb-16\">\n          <div className=\"flex justify-center mb-6\">\n            <div className=\"w-20 h-20 rounded-2xl bg-primary flex items-center justify-center\">\n              <Briefcase className=\"w-10 h-10 text-primary-foreground\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n            HR Employee Self Service\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Streamline your HR tasks with our AI-powered employee portal. \n            Manage leaves, track attendance, and get instant HR support.\n          </p>\n          <Button \n            size=\"lg\" \n            className=\"px-8 py-3\"\n            onClick={() => window.location.href = '/api/auth/login'}\n            data-testid=\"button-signin-hero\"\n          >\n            Sign In to Continue\n          </Button>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <Card key={index} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                    <Icon className=\"w-6 h-6 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-lg\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        {/* CTA Section */}\n        <div className=\"text-center\">\n          <Card className=\"max-w-2xl mx-auto\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">\n                Ready to get started?\n              </h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Access all your HR needs in one place. Secure, fast, and user-friendly.\n              </p>\n              <Button \n                size=\"lg\" \n                className=\"px-8\"\n                onClick={() => window.location.href = '/api/auth/login'}\n                data-testid=\"button-signin-cta\"\n              >\n                Sign In Now\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3743},"client/src/pages/LeaveCorrection.tsx":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Edit, Trash2, Eye, UserCheck, Ban, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function LeaveCorrection() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: leaves, isLoading } = useQuery({\n    queryKey: ['/api/leaves'],\n  });\n\n  const cancelLeaveMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('PUT', `/api/leaves/${id}`, { status: 'cancelled' });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Leave Cancelled\",\n        description: \"Your leave request has been cancelled successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/leaves'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-accent/10 text-accent';\n      case 'pending':\n        return 'bg-amber-500/10 text-amber-500';\n      case 'rejected':\n        return 'bg-destructive/10 text-destructive';\n      case 'cancelled':\n        return 'bg-muted text-muted-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getLeaveTypeName = (typeId: string) => {\n    switch (typeId) {\n      case 'casual':\n        return 'Casual Leave';\n      case 'sick':\n        return 'Sick Leave';\n      case 'earned':\n        return 'Earned Leave';\n      default:\n        return 'Leave';\n    }\n  };\n\n  const canEdit = (status: string) => {\n    return status === 'pending';\n  };\n\n  const canCancel = (status: string) => {\n    return status === 'pending' || status === 'approved';\n  };\n\n  const filterLeavesByStatus = (status?: string) => {\n    if (!leaves) return [];\n    if (!status) return leaves;\n    return leaves.filter((leave: any) => leave.status === status);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"animate-pulse\">\n          <CardContent className=\"p-6\">\n            <div className=\"h-32 bg-muted rounded\"></div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const allLeaves = filterLeavesByStatus();\n  const pendingLeaves = filterLeavesByStatus('pending');\n  const approvedLeaves = filterLeavesByStatus('approved');\n  const cancelledLeaves = filterLeavesByStatus('cancelled');\n\n  const LeaveCard = ({ leave }: { leave: any }) => (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <h4 className=\"text-lg font-semibold text-foreground\">\n                {getLeaveTypeName(leave.leaveTypeId)}\n              </h4>\n              <Badge className={getStatusColor(leave.status)}>\n                {leave.status === 'pending' && 'Pending Approval'}\n                {leave.status === 'approved' && 'Approved'}\n                {leave.status === 'rejected' && 'Rejected'}\n                {leave.status === 'cancelled' && 'Cancelled'}\n              </Badge>\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-3\">\n              {format(new Date(leave.fromDate), \"MMM dd, yyyy\")} - {format(new Date(leave.toDate), \"MMM dd, yyyy\")} \n              ({leave.days} {leave.days === \"1\" ? \"day\" : \"days\"}) • \n              Applied on {format(new Date(leave.appliedAt), \"MMM dd, yyyy\")}\n            </p>\n            <div className=\"bg-muted rounded-lg p-3 mb-4\">\n              <p className=\"text-sm text-foreground\">\n                <strong>Reason:</strong> {leave.reason}\n              </p>\n            </div>\n            {leave.reviewedBy && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n                <UserCheck className=\"w-4 h-4\" />\n                <span>\n                  {leave.status === 'approved' ? 'Approved' : 'Reviewed'} by Manager on {' '}\n                  {format(new Date(leave.reviewedAt), \"MMM dd, yyyy\")}\n                </span>\n              </div>\n            )}\n            {leave.status === 'cancelled' && (\n              <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n                <Ban className=\"w-4 h-4\" />\n                <span>Cancelled on {format(new Date(leave.updatedAt), \"MMM dd, yyyy\")}</span>\n              </div>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2 ml-4\">\n            <Button variant=\"ghost\" size=\"sm\">\n              <Eye className=\"w-4 h-4\" />\n            </Button>\n            {canEdit(leave.status) && (\n              <Button variant=\"ghost\" size=\"sm\">\n                <Edit className=\"w-4 h-4 text-primary\" />\n              </Button>\n            )}\n            {canCancel(leave.status) && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => cancelLeaveMutation.mutate(leave.id)}\n                disabled={cancelLeaveMutation.isPending}\n              >\n                <Trash2 className=\"w-4 h-4 text-destructive\" />\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        {canEdit(leave.status) && (\n          <div className=\"flex items-center gap-4\">\n            <Button className=\"px-4\">\n              <Edit className=\"w-4 h-4 mr-2\" />\n              Edit Request\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"px-4 border-destructive text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n              onClick={() => cancelLeaveMutation.mutate(leave.id)}\n              disabled={cancelLeaveMutation.isPending}\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Cancel Request\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg\">Manage Leave Requests</CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Edit or cancel your pending and approved leave requests\n          </p>\n        </CardHeader>\n      </Card>\n\n      <Tabs defaultValue=\"all\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"all\">All Requests ({allLeaves.length})</TabsTrigger>\n          <TabsTrigger value=\"pending\">Pending ({pendingLeaves.length})</TabsTrigger>\n          <TabsTrigger value=\"approved\">Approved ({approvedLeaves.length})</TabsTrigger>\n          <TabsTrigger value=\"cancelled\">Cancelled ({cancelledLeaves.length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"all\" className=\"space-y-4\">\n          {allLeaves.length > 0 ? (\n            allLeaves.map((leave: any) => (\n              <LeaveCard key={leave.id} leave={leave} />\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">No leave requests found</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"pending\" className=\"space-y-4\">\n          {pendingLeaves.length > 0 ? (\n            pendingLeaves.map((leave: any) => (\n              <LeaveCard key={leave.id} leave={leave} />\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">No pending leave requests</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"approved\" className=\"space-y-4\">\n          {approvedLeaves.length > 0 ? (\n            approvedLeaves.map((leave: any) => (\n              <LeaveCard key={leave.id} leave={leave} />\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">No approved leave requests</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"cancelled\" className=\"space-y-4\">\n          {cancelledLeaves.length > 0 ? (\n            cancelledLeaves.map((leave: any) => (\n              <LeaveCard key={leave.id} leave={leave} />\n            ))\n          ) : (\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">No cancelled leave requests</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":9559},"client/src/pages/LeaveSummary.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Umbrella, Thermometer, Trophy, Calendar, Eye } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function LeaveSummary() {\n  const { data: leaves, isLoading: leavesLoading } = useQuery({\n    queryKey: ['/api/leaves'],\n  });\n\n  const { data: leaveBalances, isLoading: balancesLoading } = useQuery({\n    queryKey: ['/api/leave-balances'],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-accent/10 text-accent';\n      case 'pending':\n        return 'bg-amber-500/10 text-amber-500';\n      case 'rejected':\n        return 'bg-destructive/10 text-destructive';\n      case 'cancelled':\n        return 'bg-muted text-muted-foreground';\n      default:\n        return 'bg-muted text-muted-foreground';\n    }\n  };\n\n  const getLeaveTypeColor = (type: string) => {\n    switch (type) {\n      case 'casual':\n        return 'bg-primary';\n      case 'sick':\n        return 'bg-accent';\n      case 'earned':\n        return 'bg-blue-500';\n      default:\n        return 'bg-muted';\n    }\n  };\n\n  if (leavesLoading || balancesLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-32 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Leave Balance Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {leaveBalances?.map((balance: any) => {\n          const used = balance.usedDays || 0;\n          const total = balance.totalDays || 0;\n          const remaining = total - used;\n          const percentage = total > 0 ? (used / total) * 100 : 0;\n\n          const getLeaveTypeDetails = (leaveTypeId: string) => {\n            switch (leaveTypeId) {\n              case 'casual':\n                return {\n                  name: 'Casual Leave',\n                  icon: Umbrella,\n                  color: 'text-primary',\n                  bgColor: 'bg-primary/10'\n                };\n              case 'sick':\n                return {\n                  name: 'Sick Leave',\n                  icon: Thermometer,\n                  color: 'text-accent',\n                  bgColor: 'bg-accent/10'\n                };\n              case 'earned':\n                return {\n                  name: 'Earned Leave',\n                  icon: Trophy,\n                  color: 'text-blue-500',\n                  bgColor: 'bg-blue-500/10'\n                };\n              default:\n                return {\n                  name: 'Leave',\n                  icon: Calendar,\n                  color: 'text-muted-foreground',\n                  bgColor: 'bg-muted/10'\n                };\n            }\n          };\n\n          const leaveType = getLeaveTypeDetails(balance.leaveTypeId);\n          const Icon = leaveType.icon;\n\n          return (\n            <Card key={balance.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`p-3 rounded-lg ${leaveType.bgColor}`}>\n                    <Icon className={`w-6 h-6 ${leaveType.color}`} />\n                  </div>\n                  <span className=\"text-2xl font-bold text-foreground\">{remaining}</span>\n                </div>\n                <h4 className=\"font-semibold text-foreground mb-1\">{leaveType.name}</h4>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  {used} used of {total} allocated\n                </p>\n                <Progress value={percentage} className=\"h-2\" />\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Leave History */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg\">Leave History</CardTitle>\n            <div className=\"flex items-center gap-3\">\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"casual\">Casual Leave</SelectItem>\n                  <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                  <SelectItem value=\"earned\">Earned Leave</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select defaultValue=\"2024\">\n                <SelectTrigger className=\"w-20\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"2024\">2024</SelectItem>\n                  <SelectItem value=\"2023\">2023</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {leaves && leaves.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Leave Type</TableHead>\n                    <TableHead>From Date</TableHead>\n                    <TableHead>To Date</TableHead>\n                    <TableHead>Days</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {leaves.map((leave: any) => (\n                    <TableRow key={leave.id} className=\"hover:bg-muted/50\">\n                      <TableCell>\n                        <div className=\"flex items-center gap-2\">\n                          <div \n                            className={`w-2 h-2 rounded-full ${getLeaveTypeColor(leave.leaveTypeId)}`}\n                          />\n                          <span className=\"text-sm font-medium\">\n                            {leave.leaveTypeId === 'casual' ? 'Casual Leave' :\n                             leave.leaveTypeId === 'sick' ? 'Sick Leave' :\n                             leave.leaveTypeId === 'earned' ? 'Earned Leave' : 'Leave'}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {format(new Date(leave.fromDate), \"MMM dd, yyyy\")}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {format(new Date(leave.toDate), \"MMM dd, yyyy\")}\n                      </TableCell>\n                      <TableCell className=\"text-sm font-medium\">\n                        {leave.days}\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          className={`${getStatusColor(leave.status)} capitalize`}\n                        >\n                          {leave.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          className=\"text-primary hover:text-primary/80\"\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          View\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n              <p className=\"text-muted-foreground\">No leave history available</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8671},"client/src/pages/RegularizeAttendance.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\nimport { Check, Home, MapPin, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst regularizeSchema = z.object({\n  date: z.string().min(1, \"Date is required\"),\n  status: z.enum([\"wfh\", \"leave\", \"outdoor\"], {\n    required_error: \"Please select a regularization type\",\n  }),\n  reason: z.string().min(10, \"Reason must be at least 10 characters\"),\n});\n\ntype RegularizeForm = z.infer<typeof regularizeSchema>;\n\nexport default function RegularizeAttendance() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedAbsentDates, setSelectedAbsentDates] = useState<string[]>([]);\n\n  const form = useForm<RegularizeForm>({\n    resolver: zodResolver(regularizeSchema),\n    defaultValues: {\n      date: \"\",\n      status: undefined,\n      reason: \"\",\n    },\n  });\n\n  const { data: absentDates, isLoading } = useQuery({\n    queryKey: ['/api/attendance/absent-dates', { days: 7 }],\n  });\n\n  const regularizeMutation = useMutation({\n    mutationFn: async (data: RegularizeForm) => {\n      return await apiRequest('POST', '/api/attendance/regularize', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Attendance Regularized\",\n        description: \"Your attendance has been regularized successfully.\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance/absent-dates'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegularizeForm) => {\n    regularizeMutation.mutate(data);\n  };\n\n  const toggleAbsentDate = (date: string) => {\n    setSelectedAbsentDates(prev => \n      prev.includes(date) \n        ? prev.filter(d => d !== date)\n        : [...prev, date]\n    );\n  };\n\n  const regularizationTypes = [\n    {\n      value: \"wfh\",\n      title: \"Work from Home\",\n      description: \"Mark as WFH\",\n      icon: Home,\n      color: \"text-blue-500\"\n    },\n    {\n      value: \"leave\",\n      title: \"Apply Leave\",\n      description: \"Convert to leave\",\n      icon: Calendar,\n      color: \"text-primary\"\n    },\n    {\n      value: \"outdoor\",\n      title: \"Outdoor Duty\",\n      description: \"Client/field visit\",\n      icon: MapPin,\n      color: \"text-accent\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n              <div className=\"h-32 bg-muted rounded\"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-xl\">Regularize Attendance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Date Selection */}\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Select Date(s) <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <p className=\"text-xs text-muted-foreground\">\n                      You can only regularize dates from the last 7 days\n                    </p>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Recent Absent Dates */}\n              {absentDates && absentDates.length > 0 && (\n                <Card className=\"bg-muted/50\">\n                  <CardContent className=\"pt-4\">\n                    <h4 className=\"font-semibold text-foreground mb-3\">Recent Absent Dates</h4>\n                    <div className=\"space-y-2\">\n                      {absentDates.map((record: any) => (\n                        <div \n                          key={record.id} \n                          className=\"flex items-center justify-between p-3 bg-card rounded-lg\"\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Checkbox \n                              checked={selectedAbsentDates.includes(record.date)}\n                              onCheckedChange={() => toggleAbsentDate(record.date)}\n                            />\n                            <div>\n                              <p className=\"text-sm font-medium text-foreground\">\n                                {format(new Date(record.date), \"MMMM dd, yyyy\")}\n                              </p>\n                              <p className=\"text-xs text-destructive\">Absent - Not marked</p>\n                            </div>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {format(new Date(record.date), \"EEEE\")}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Regularization Type */}\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Regularization Type <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <RadioGroup \n                        onValueChange={field.onChange} \n                        defaultValue={field.value}\n                        className=\"grid grid-cols-1 md:grid-cols-3 gap-3\"\n                      >\n                        {regularizationTypes.map((type) => {\n                          const Icon = type.icon;\n                          return (\n                            <div key={type.value} className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value={type.value} id={type.value} />\n                              <Label \n                                htmlFor={type.value}\n                                className=\"flex items-center gap-3 p-4 border border-input rounded-lg cursor-pointer hover:border-primary transition-colors flex-1\"\n                              >\n                                <Icon className={`w-5 h-5 ${type.color}`} />\n                                <div>\n                                  <p className=\"font-medium text-sm\">{type.title}</p>\n                                  <p className=\"text-xs text-muted-foreground\">{type.description}</p>\n                                </div>\n                              </Label>\n                            </div>\n                          );\n                        })}\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Reason */}\n              <FormField\n                control={form.control}\n                name=\"reason\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Reason <span className=\"text-destructive\">*</span></FormLabel>\n                    <FormControl>\n                      <Textarea \n                        {...field} \n                        rows={4} \n                        placeholder=\"Explain why you need to regularize attendance...\"\n                        className=\"resize-none\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Actions */}\n              <div className=\"flex items-center gap-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={regularizeMutation.isPending}\n                  className=\"px-6\"\n                >\n                  <Check className=\"w-4 h-4 mr-2\" />\n                  {regularizeMutation.isPending ? \"Submitting...\" : \"Submit Regularization\"}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  onClick={() => form.reset()}\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9550},"client/src/pages/SalarySlips.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Download, Eye, FileText, Calendar } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function SalarySlips() {\n  const [selectedYear, setSelectedYear] = useState(\"2024\");\n\n  const { data: salarySlips, isLoading } = useQuery({\n    queryKey: ['/api/salary-slips'],\n  });\n\n  const getMonthName = (month: number) => {\n    const months = [\n      \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n    ];\n    return months[month - 1];\n  };\n\n  const getGradientColor = (index: number) => {\n    const gradients = [\n      \"from-primary to-blue-600\",\n      \"from-accent to-green-600\", \n      \"from-purple-500 to-purple-700\",\n      \"from-blue-500 to-blue-700\",\n      \"from-amber-500 to-orange-600\",\n      \"from-pink-500 to-rose-600\"\n    ];\n    return gradients[index % gradients.length];\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-48 bg-muted rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const filteredSlips = salarySlips?.filter((slip: any) => \n    slip.year.toString() === selectedYear\n  ) || [];\n\n  // Calculate YTD summary\n  const ytdSummary = filteredSlips.reduce((acc: any, slip: any) => ({\n    gross: acc.gross + parseFloat(slip.grossSalary || 0),\n    net: acc.net + parseFloat(slip.netSalary || 0),\n    deductions: acc.deductions + (parseFloat(slip.grossSalary || 0) - parseFloat(slip.netSalary || 0))\n  }), { gross: 0, net: 0, deductions: 0 });\n\n  const averageMonthly = filteredSlips.length > 0 ? ytdSummary.net / filteredSlips.length : 0;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Search and Filter */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row items-start md:items-center justify-between gap-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-1\">Salary Slips</h3>\n              <p className=\"text-sm text-muted-foreground\">View and download your monthly salary slips</p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Months</SelectItem>\n                  {Array.from({ length: 12 }, (_, i) => (\n                    <SelectItem key={i} value={(i + 1).toString()}>\n                      {getMonthName(i + 1)} {selectedYear}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={selectedYear} onValueChange={setSelectedYear}>\n                <SelectTrigger className=\"w-20\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"2024\">2024</SelectItem>\n                  <SelectItem value=\"2023\">2023</SelectItem>\n                  <SelectItem value=\"2022\">2022</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Salary Slips Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {filteredSlips.length > 0 ? (\n          filteredSlips.map((slip: any, index: number) => (\n            <Card key={slip.id} className=\"hover:shadow-lg transition-shadow overflow-hidden\">\n              <div className={`bg-gradient-to-br ${getGradientColor(index)} p-6 text-primary-foreground`}>\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <p className=\"text-sm opacity-90 mb-1\">Salary Slip</p>\n                    <h4 className=\"text-2xl font-bold\">\n                      {getMonthName(slip.month)} {slip.year}\n                    </h4>\n                  </div>\n                  <div className=\"w-12 h-12 bg-white/20 rounded-lg flex items-center justify-center\">\n                    <FileText className=\"w-6 h-6\" />\n                  </div>\n                </div>\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm opacity-90\">Net Salary</p>\n                  <p className=\"text-3xl font-bold\">\n                    {formatCurrency(parseFloat(slip.netSalary || 0))}\n                  </p>\n                </div>\n              </div>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3 mb-4\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Gross Salary:</span>\n                    <span className=\"font-semibold text-foreground\">\n                      {formatCurrency(parseFloat(slip.grossSalary || 0))}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Deductions:</span>\n                    <span className=\"font-semibold text-destructive\">\n                      -{formatCurrency(parseFloat(slip.grossSalary || 0) - parseFloat(slip.netSalary || 0))}\n                    </span>\n                  </div>\n                  <div className=\"border-t border-border pt-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Payment Date:</span>\n                      <span className=\"font-medium text-foreground\">\n                        {slip.paymentDate ? format(new Date(slip.paymentDate), \"MMM dd, yyyy\") : \"N/A\"}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Button className=\"flex-1 px-4\" size=\"sm\">\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Download PDF\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\" className=\"p-2\">\n                    <Eye className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <div className=\"col-span-full\">\n            <Card>\n              <CardContent className=\"p-8 text-center\">\n                <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\">No salary slips found for {selectedYear}</p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      {/* Year-to-Date Summary */}\n      {filteredSlips.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Year-to-Date Summary ({selectedYear})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Gross Pay</p>\n                <p className=\"text-2xl font-bold text-foreground\">\n                  {formatCurrency(ytdSummary.gross)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Deductions</p>\n                <p className=\"text-2xl font-bold text-destructive\">\n                  {formatCurrency(ytdSummary.deductions)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Net Pay</p>\n                <p className=\"text-2xl font-bold text-accent\">\n                  {formatCurrency(ytdSummary.net)}\n                </p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground mb-1\">Average Monthly</p>\n                <p className=\"text-2xl font-bold text-primary\">\n                  {formatCurrency(averageMonthly)}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":8896},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"replit.md":{"content":"# HR Employee Self-Service Portal\n\n## Overview\n\nThis is a comprehensive HR Employee Self-Service Portal built as a full-stack web application. The application enables employees to manage their HR-related tasks including leave applications, attendance tracking, salary slip access, and AI-powered HR assistance. It provides a modern, user-friendly interface for employees to handle routine HR operations without direct HR department intervention.\n\nThe system is designed with a clear separation between frontend and backend, using React for the client-side interface and Express.js for the server-side API. It integrates with external services for authentication, database management, AI capabilities, and cloud storage.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool and development server.\n\n**UI Component Library**: shadcn/ui components built on top of Radix UI primitives, providing a comprehensive set of accessible, customizable UI components styled with Tailwind CSS.\n\n**Routing**: wouter for client-side routing, providing a lightweight alternative to React Router.\n\n**State Management**: @tanstack/react-query for server state management, handling data fetching, caching, and synchronization with the backend.\n\n**Form Handling**: react-hook-form with zod for schema validation and @hookform/resolvers for integration between the two libraries.\n\n**Styling**: Tailwind CSS with custom design tokens defined via CSS variables, supporting a \"new-york\" style theme with neutral base colors.\n\n**Key Pages**:\n- Dashboard: Overview of HR metrics and quick actions\n- Leave Management: Apply, view, and correct leave requests\n- Attendance: View records and regularize attendance\n- Salary Slips: Access and download pay stubs\n- AI Assistant: Chat interface for HR policy questions\n- Documents: Upload and manage HR documents\n\n### Backend Architecture\n\n**Framework**: FastAPI running on Python 3.11 with SQLAlchemy ORM.\n\n**API Design**: RESTful API architecture with routes organized by feature domain (leaves, attendance, salary, documents, AI assistant).\n\n**Authentication**: Replit Auth using OpenID Connect (OIDC) with Authlib for session-based authentication.\n\n**Session Management**: Starlette SessionMiddleware with PostgreSQL session store for persistent sessions across server restarts.\n\n**Request/Response Flow**:\n- JSON request/response bodies using Pydantic models\n- Request logging middleware for API routes\n- Automatic error handling with appropriate HTTP status codes\n- CORS and security headers handled by middleware\n\n**Storage Layer**: Abstracted through DatabaseStorage class in `python_server/storage.py`, providing clean separation between business logic and data access.\n\n**Auto-Generated Documentation**: FastAPI provides interactive API documentation at `/docs` (Swagger UI) and `/redoc` (ReDoc).\n\n### Database Architecture\n\n**ORM**: SQLAlchemy with PostgreSQL dialect for type-safe database operations.\n\n**Database Provider**: PostgreSQL via psycopg2-binary driver.\n\n**Schema Design**:\n- `users`: Employee profiles with Replit Auth integration (mandatory table)\n- `sessions`: Session storage (mandatory for Replit Auth)\n- `leaveTypes`: Configurable leave types with policies\n- `leaveBalances`: Year-wise leave balance tracking per user\n- `leaves`: Leave application records with status tracking\n- `attendanceRecords`: Daily attendance tracking\n- `salarySlips`: Monthly salary information\n- `hrDocuments`: Document metadata and storage references\n- `aiConversations`: Chat history with AI assistant\n\n**Migration Strategy**: Alembic for schema migrations (optional), or automatic table creation via SQLAlchemy on startup.\n\n### External Service Integrations\n\n**Authentication Service**: Replit Auth (OIDC provider)\n- Integration through Authlib library\n- Session-based authentication with secure cookies\n- User profile synchronization with local database\n\n**AI Service**: OpenAI GPT-4o\n- Integration in `python_server/openai_service.py`\n- Document-based context retrieval for HR assistant\n- Conversation history tracking for improved responses\n\n**Object Storage**: Google Cloud Storage via Replit Object Storage\n- Custom ACL (Access Control List) system for fine-grained permissions\n- Presigned URL generation for secure file uploads\n- File upload handled client-side via Uppy with AWS S3-compatible interface\n- Document categorization and metadata management\n\n**File Upload Flow**:\n1. Client requests presigned URL from backend\n2. Backend generates GCS presigned URL with appropriate ACL\n3. Client uploads directly to GCS using Uppy\n4. Client notifies backend of completed upload\n5. Backend updates database with file metadata\n\n### Development and Build Process\n\n**Development Mode**: \n- Vite dev server with HMR (Hot Module Replacement) for frontend\n- Python FastAPI server with auto-reload using Uvicorn\n- Concurrent frontend and backend development\n- Replit-specific plugins for enhanced development experience\n\n**Production Build**:\n- Frontend: Vite builds optimized React bundle to `dist/public`\n- Backend: Python FastAPI server runs with Uvicorn in production mode\n- Static file serving from built frontend assets\n\n**Type Safety**: Pydantic models provide runtime validation and automatic API documentation in Python backend. Frontend uses TypeScript for compile-time type safety.\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: PostgreSQL via psycopg2-binary\n- **Authentication**: Replit Auth (OIDC provider accessed via Authlib)\n- **Session Store**: Starlette SessionMiddleware\n\n### Cloud Services\n- **Object Storage**: Google Cloud Storage (google-cloud-storage) with Replit Object Storage sidecar\n- **AI/ML**: OpenAI API (GPT-4o model via openai Python library)\n\n### Frontend Libraries\n- **UI Framework**: React 18+ with TypeScript\n- **UI Components**: Radix UI primitives (@radix-ui/react-*)\n- **Styling**: Tailwind CSS with class-variance-authority\n- **State Management**: TanStack Query (React Query)\n- **Form Handling**: react-hook-form with zod validation\n- **File Upload**: Uppy (@uppy/core, @uppy/dashboard, @uppy/aws-s3, @uppy/react)\n- **Routing**: wouter\n\n### Backend Libraries (Python)\n- **Web Framework**: FastAPI 0.118.0\n- **ORM**: SQLAlchemy 2.0.43\n- **Database Driver**: psycopg2-binary 2.9.10\n- **Validation**: Pydantic 2.11.10\n- **Authentication**: Authlib 1.6.5\n- **HTTP Client**: httpx 0.28.1\n- **File Upload**: python-multipart (for multipart form data)\n- **AI Integration**: openai 2.1.0\n- **Object Storage**: google-cloud-storage 3.4.0\n- **Configuration**: pydantic-settings 2.11.0\n- **Server**: Uvicorn 0.37.0\n\n### Build Tools\n- **Frontend Build**: Vite with React plugin\n- **Backend Server**: Uvicorn ASGI server\n- **TypeScript**: tsc for type checking (frontend only)\n- **Database Migrations**: Alembic (optional), or automatic via SQLAlchemy\n\n### Development Tools (Replit-specific)\n- @replit/vite-plugin-runtime-error-modal\n- @replit/vite-plugin-cartographer\n- @replit/vite-plugin-dev-banner","size_bytes":7115},"README.md":{"content":"# HR Employee Self-Service Portal - Python Backend\n\nA comprehensive HR Employee Self-Service Portal with a **Python FastAPI backend** and React frontend. This application enables employees to manage leave applications, track attendance, access salary slips, and get AI-powered HR assistance.\n\n## 🏗️ Architecture\n\n### Backend (Python)\n- **Framework**: FastAPI\n- **ORM**: SQLAlchemy\n- **Database**: PostgreSQL\n- **Authentication**: Replit Auth (OIDC)\n- **AI Integration**: OpenAI GPT-4o\n- **Object Storage**: Google Cloud Storage\n- **API Documentation**: Auto-generated Swagger UI at `/docs`\n\n### Frontend (React)\n- **Framework**: React 18 with TypeScript\n- **UI Library**: shadcn/ui + Radix UI\n- **Styling**: Tailwind CSS\n- **State Management**: TanStack Query (React Query)\n- **Routing**: wouter\n- **Build Tool**: Vite\n\n## 📋 Prerequisites\n\n- Python 3.11 or higher\n- PostgreSQL database\n- Node.js 18+ (for frontend)\n- OpenAI API key\n- Replit account (for Auth and Object Storage)\n\n## 🚀 Quick Start\n\n### 1. Clone the Repository\n\n```bash\ngit clone <your-repo-url>\ncd <your-project-directory>\n```\n\n### 2. Set Up Python Backend\n\n#### Install Python Dependencies\n\n```bash\ncd python_server\npip install -r requirements.txt\n```\n\n#### Configure Environment Variables\n\nCreate a `.env` file in the `python_server` directory:\n\n```bash\ncp .env.example .env\n```\n\nEdit `.env` with your configuration:\n\n```env\n# Database Configuration\nDATABASE_URL=postgresql://user:password@localhost:5432/dbname\n\n# OpenAI Configuration\nOPENAI_API_KEY=your_openai_api_key_here\n\n# Replit Auth Configuration\nISSUER_URL=https://replit.com/oidc\nREPL_ID=your_repl_id\nREPLIT_DOMAINS=your-domain.replit.app\nSESSION_SECRET=your_session_secret_key\n\n# Object Storage Configuration\nPUBLIC_OBJECT_SEARCH_PATHS=/bucket-name/public\nPRIVATE_OBJECT_DIR=/bucket-name/.private\n\n# Server Configuration\nPORT=5000\n```\n\n#### Run Database Migrations\n\nThe database tables will be automatically created when you start the server for the first time.\n\n#### Start the Python Server\n\n```bash\npython main.py\n```\n\nOr use the provided script:\n\n```bash\nbash run.sh\n```\n\nThe server will start on `http://0.0.0.0:5000`\n\n### 3. Set Up Frontend (if running separately)\n\n#### Install Frontend Dependencies\n\n```bash\nnpm install\n```\n\n#### Start Frontend Development Server\n\n```bash\nnpm run dev\n```\n\n## 📁 Project Structure\n\n```\n.\n├── python_server/               # Python Backend\n│   ├── main.py                 # FastAPI application entry point\n│   ├── models.py               # SQLAlchemy database models\n│   ├── database.py             # Database configuration\n│   ├── storage.py              # Data access layer (CRUD operations)\n│   ├── routes.py               # API route handlers\n│   ├── auth.py                 # Authentication middleware\n│   ├── openai_service.py       # OpenAI integration\n│   ├── object_storage.py       # Google Cloud Storage integration\n│   ├── config.py               # Application configuration\n│   ├── requirements.txt        # Python dependencies\n│   └── .env.example            # Environment variables template\n│\n├── client/                      # React Frontend\n│   ├── src/\n│   │   ├── pages/              # Page components\n│   │   ├── components/         # Reusable UI components\n│   │   ├── lib/                # Utilities and helpers\n│   │   └── App.tsx             # Main application component\n│   └── index.html\n│\n├── shared/                      # Shared TypeScript types (legacy)\n│   └── schema.ts\n│\n└── README.md                    # This file\n```\n\n## 🔧 Python Server Components\n\n### 1. Models (`models.py`)\nDefines SQLAlchemy database models for:\n- Users\n- Leave Types & Balances\n- Leaves\n- Attendance Records\n- Salary Slips\n- HR Documents\n- AI Conversations\n\n### 2. Storage Layer (`storage.py`)\nImplements data access patterns with methods for:\n- User management\n- Leave management (CRUD)\n- Attendance tracking\n- Salary slip retrieval\n- HR document management\n- AI conversation history\n\n### 3. Routes (`routes.py`)\nRESTful API endpoints:\n- `/api/auth/*` - Authentication\n- `/api/dashboard/stats` - Dashboard metrics\n- `/api/leaves` - Leave management\n- `/api/attendance` - Attendance tracking\n- `/api/salary-slips` - Payroll information\n- `/api/hr-documents` - Document management\n- `/api/ai/*` - AI Assistant\n\n### 4. Authentication (`auth.py`)\n- Replit Auth (OIDC) integration\n- Session-based authentication\n- Token refresh logic\n- User session management\n\n### 5. OpenAI Integration (`openai_service.py`)\n- HR Assistant chatbot using GPT-4o\n- Document processing for vector search\n- Context-aware responses\n\n### 6. Object Storage (`object_storage.py`)\n- Google Cloud Storage integration\n- Signed URL generation\n- Public/private file management\n\n## 📡 API Documentation\n\nOnce the server is running, visit:\n- Swagger UI: `http://localhost:5000/docs`\n- ReDoc: `http://localhost:5000/redoc`\n\n### Key API Endpoints\n\n#### Authentication\n- `GET /api/auth/login` - Initiate login\n- `GET /api/auth/callback` - OAuth callback\n- `GET /api/auth/logout` - Logout\n- `GET /api/auth/user` - Get current user\n\n#### Dashboard\n- `GET /api/dashboard/stats` - Get dashboard statistics\n\n#### Leave Management\n- `GET /api/leave-types` - List leave types\n- `GET /api/leave-balances` - Get leave balances\n- `POST /api/leaves` - Apply for leave\n- `GET /api/leaves` - List user's leaves\n- `PUT /api/leaves/{id}` - Update leave\n- `DELETE /api/leaves/{id}` - Cancel leave\n\n#### Attendance\n- `GET /api/attendance` - Get attendance records\n- `GET /api/attendance/absent-dates` - Get recent absences\n- `POST /api/attendance/regularize` - Regularize attendance\n\n#### Salary\n- `GET /api/salary-slips` - List salary slips\n- `GET /api/salary-slips/{month}/{year}` - Get specific slip\n\n#### HR Documents\n- `GET /api/hr-documents` - List documents\n- `POST /api/hr-documents/upload` - Upload document\n- `DELETE /api/hr-documents/{id}` - Delete document\n\n#### AI Assistant\n- `POST /api/ai/ask` - Ask HR question\n- `GET /api/ai/conversations` - Get conversation history\n\n## 🗃️ Database Schema\n\nThe application uses PostgreSQL with the following main tables:\n\n- **users** - Employee information\n- **sessions** - User sessions (required for Replit Auth)\n- **leave_types** - Types of leaves (sick, casual, etc.)\n- **leave_balances** - User leave balances per year\n- **leaves** - Leave applications\n- **attendance_records** - Daily attendance\n- **salary_slips** - Monthly salary information\n- **hr_documents** - Policy documents and files\n- **ai_conversations** - AI chat history\n\n## 🔐 Authentication Flow\n\n1. User clicks \"Login\" → Redirected to `/api/auth/login`\n2. FastAPI redirects to Replit Auth OIDC provider\n3. User authenticates with Replit\n4. Callback to `/api/auth/callback` with auth code\n5. Exchange code for tokens\n6. Store user session and sync to database\n7. Redirect to dashboard\n\n## 🤖 AI Assistant Features\n\nThe AI Assistant uses OpenAI's GPT-4o to answer HR questions based on uploaded company documents:\n\n1. **Document Processing**: Uploaded documents are chunked and processed\n2. **Context Building**: Relevant documents are included in prompts\n3. **Q&A**: Employees ask questions, AI provides policy-based answers\n4. **History**: All conversations are saved for reference\n\n## 🌐 Deployment\n\n### On Replit\n\n1. Import the repository\n2. Set up environment variables in Secrets\n3. Provision a PostgreSQL database\n4. Create an Object Storage bucket\n5. Run the server: `python python_server/main.py`\n\n### On Other Platforms\n\n1. Set up a PostgreSQL database\n2. Configure environment variables\n3. Install dependencies: `pip install -r python_server/requirements.txt`\n4. Run: `python python_server/main.py`\n5. Use a process manager like `gunicorn` or `supervisor` for production\n\n### Production Considerations\n\n- Use `gunicorn` with multiple workers:\n  ```bash\n  gunicorn -w 4 -k uvicorn.workers.UvicornWorker python_server.main:app\n  ```\n- Enable HTTPS\n- Set strong `SESSION_SECRET`\n- Configure CORS properly\n- Use environment-specific `.env` files\n- Set up database backups\n- Monitor with tools like Sentry\n\n## 🛠️ Development\n\n### Running in Development Mode\n\nThe server supports hot-reload with:\n\n```bash\ncd python_server\nuvicorn main:app --reload --host 0.0.0.0 --port 5000\n```\n\n### Database Migrations\n\nThis application uses SQLAlchemy. For migrations:\n\n1. Install Alembic: `pip install alembic`\n2. Initialize: `alembic init migrations`\n3. Configure `alembic.ini` with your DATABASE_URL\n4. Create migration: `alembic revision --autogenerate -m \"description\"`\n5. Apply: `alembic upgrade head`\n\n### Testing\n\nCreate a `tests/` directory and use `pytest`:\n\n```bash\npip install pytest pytest-asyncio httpx\npytest\n```\n\n## 📝 Environment Variables Reference\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `DATABASE_URL` | PostgreSQL connection string | Yes |\n| `OPENAI_API_KEY` | OpenAI API key for AI assistant | Yes |\n| `ISSUER_URL` | OIDC issuer URL | Yes |\n| `REPL_ID` | Replit application ID | Yes |\n| `REPLIT_DOMAINS` | Comma-separated allowed domains | Yes |\n| `SESSION_SECRET` | Secret key for session encryption | Yes |\n| `PUBLIC_OBJECT_SEARCH_PATHS` | Object storage public paths | Yes* |\n| `PRIVATE_OBJECT_DIR` | Object storage private directory | Yes* |\n| `PORT` | Server port (default: 5000) | No |\n\n\\* Required if using object storage features\n\n## 🐛 Troubleshooting\n\n### Database Connection Issues\n```bash\n# Check DATABASE_URL format\n# Should be: postgresql://user:password@host:port/database\n```\n\n### OIDC Authentication Fails\n```bash\n# Verify ISSUER_URL, REPL_ID, and REPLIT_DOMAINS\n# Ensure callback URL matches: https://{REPLIT_DOMAIN}/api/auth/callback\n```\n\n### OpenAI API Errors\n```bash\n# Verify OPENAI_API_KEY is set and valid\n# Check API usage limits and billing\n```\n\n### Module Import Errors\n```bash\n# Ensure all dependencies are installed\npip install -r requirements.txt\n```\n\n## 📄 License\n\n[Your License Here]\n\n## 👥 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Submit a pull request\n\n## 📧 Support\n\nFor issues and questions, please open an issue on GitHub.\n\n---\n\nBuilt with ❤️ using Python FastAPI and React\n","size_bytes":10383},"README_PYTHON_BACKEND.md":{"content":"# HR Employee Self-Service Portal - Python Backend Setup\n\nThis guide explains how to run the HR portal with the **Python/FastAPI backend** instead of the TypeScript/Express backend.\n\n## 🚀 Quick Start - Run Python Backend\n\n### Step 1: Install Python Dependencies\n\n```bash\ncd python_server\npip install -r requirements.txt\n```\n\n### Step 2: Initialize the Database\n\nThis creates all tables and adds sample leave types:\n\n```bash\ncd python_server\npython init_db.py\n```\n\n### Step 3: Start the Python Server\n\n```bash\ncd python_server\npython main.py\n```\n\nThe server will start on **http://0.0.0.0:5000**\n\n### Step 4: Access the Application\n\n- **Application**: Open your Replit URL (the server serves both API and frontend)\n- **API Docs**: Visit `/docs` for interactive Swagger documentation\n- **API ReDoc**: Visit `/redoc` for alternative documentation\n\n## 📁 What's Included\n\nThe complete Python backend is in the `python_server/` directory:\n\n```\npython_server/\n├── README.md              # Detailed Python backend documentation\n├── main.py                # FastAPI application (starts here!)\n├── config.py              # Settings and configuration\n├── database.py            # Database connection setup\n├── models.py              # SQLAlchemy database models\n├── storage.py             # Database CRUD operations\n├── routes.py              # All API endpoints\n├── auth.py                # Replit Auth (OIDC) integration\n├── openai_service.py      # AI assistant integration\n├── object_storage.py      # Google Cloud Storage\n├── init_db.py             # Database initialization script\n├── requirements.txt       # Python dependencies\n└── .env.example           # Environment variables template\n```\n\n## 🔧 Environment Configuration\n\nThe Python server uses these environment variables (automatically provided by Replit):\n\n```bash\n# Database (auto-configured)\nDATABASE_URL=postgresql://...\n\n# Replit Auth (auto-configured)\nREPL_ID=your-repl-id\nREPLIT_DOMAINS=your-domain.replit.app\nISSUER_URL=https://replit.com/oidc\n\n# OpenAI API\nOPENAI_API_KEY=your-key-here\n\n# Object Storage (after creating bucket)\nPUBLIC_OBJECT_SEARCH_PATHS=/bucket/public\nPRIVATE_OBJECT_DIR=/bucket/.private\n\n# Session Secret\nSECRET_KEY=your-secret-key\n```\n\n## ✅ Features Implemented\n\n### Authentication\n- ✅ Replit Auth (OpenID Connect)\n- ✅ Session management with PostgreSQL\n- ✅ Automatic token refresh\n- ✅ User profile synchronization\n\n### Leave Management\n- ✅ View leave types\n- ✅ Apply for leave\n- ✅ Check leave balance\n- ✅ Leave history and status tracking\n- ✅ Leave request corrections\n\n### Attendance\n- ✅ View attendance records\n- ✅ Attendance regularization\n- ✅ Monthly attendance summary\n\n### Salary\n- ✅ View salary slips\n- ✅ Download salary PDFs\n- ✅ Salary components breakdown\n\n### AI Assistant\n- ✅ GPT-4o powered HR assistant\n- ✅ Conversation history\n- ✅ Document context awareness\n\n### Documents\n- ✅ Upload HR documents\n- ✅ View document library\n- ✅ Secure cloud storage (Google Cloud)\n\n## 🔍 Testing the Leave Feature\n\nAfter starting the server, test the leave functionality:\n\n### 1. Check Leave Types\n\n```bash\n# The init_db.py script adds these leave types:\n# - Casual Leave (12 days)\n# - Sick Leave (10 days)\n# - Earned Leave (20 days)\n# - Maternity Leave (180 days)\n# - Paternity Leave (15 days)\n# - Compensatory Off (12 days)\n```\n\n### 2. Test the API\n\nVisit `http://localhost:5000/docs` and try:\n\n1. **GET /api/leave-types** - Should return all 6 leave types\n2. **GET /api/leave-balances** - Your leave balances for current year\n3. **POST /api/leaves** - Apply for a leave\n4. **GET /api/leaves** - View your leave requests\n\n### 3. Test from Frontend\n\n1. Login via Replit Auth\n2. Go to \"Apply Leave\" page\n3. Leave type dropdown should show all 6 types\n4. Fill the form and submit\n5. Check \"Leave Summary\" to see your request\n\n## 🐛 Troubleshooting\n\n### Leave Types Not Showing?\n\n1. **Check database initialization**:\n```bash\ncd python_server\npython init_db.py\n```\n\n2. **Verify via API docs**:\nVisit `/docs` and call GET `/api/leave-types`\n\n3. **Check server logs**:\nLook for any errors in the terminal where Python server is running\n\n### Leave Submission Not Working?\n\n1. **Check browser console** for errors\n2. **Verify authentication** - Make sure you're logged in\n3. **Check API docs** - Test POST `/api/leaves` endpoint directly\n4. **Review server logs** for error messages\n\n### Database Issues?\n\n```bash\n# Reset database (WARNING: Deletes all data!)\ncd python_server\npython -c \"from database import Base, engine; Base.metadata.drop_all(engine); Base.metadata.create_all(engine)\"\npython init_db.py\n```\n\n### Object Storage Issues?\n\n1. Create a bucket in Replit's \"Object Storage\" tool\n2. Set environment variables:\n```bash\nPUBLIC_OBJECT_SEARCH_PATHS=/your-bucket-name/public\nPRIVATE_OBJECT_DIR=/your-bucket-name/.private\n```\n\n## 📊 API Endpoints Overview\n\n### Leave Management Endpoints\n\n| Method | Endpoint | Description |\n|--------|----------|-------------|\n| GET | `/api/leave-types` | Get all leave types |\n| GET | `/api/leave-balances` | Get user's leave balances |\n| GET | `/api/leaves` | Get user's leave requests |\n| POST | `/api/leaves` | Apply for new leave |\n| PUT | `/api/leaves/{id}` | Update leave request |\n| DELETE | `/api/leaves/{id}` | Cancel leave request |\n\n### Other Endpoints\n\n| Category | Endpoints |\n|----------|-----------|\n| Auth | `/api/auth/user`, `/api/auth/login`, `/api/auth/callback`, `/api/auth/logout` |\n| Dashboard | `/api/dashboard/stats` |\n| Attendance | `/api/attendance`, `/api/attendance/regularize` |\n| Salary | `/api/salary`, `/api/salary/{id}/download` |\n| Documents | `/api/documents`, `/api/documents/upload-url` |\n| AI | `/api/ai/ask`, `/api/ai/conversations` |\n\n## 🚢 Deployment to GitHub\n\nThe Python backend is ready for GitHub deployment:\n\n1. **Push to GitHub**:\n```bash\ngit add python_server/\ngit commit -m \"Add complete Python/FastAPI backend\"\ngit push origin main\n```\n\n2. **Deploy anywhere** that supports Python 3.11+:\n- Replit (already configured!)\n- Heroku\n- Railway\n- Google Cloud Run\n- AWS Lambda\n- DigitalOcean App Platform\n\n3. **Requirements**:\n- Python 3.11+\n- PostgreSQL database\n- Environment variables configured\n\n## 📚 Further Documentation\n\n- **Python Backend Details**: See `python_server/README.md`\n- **API Documentation**: Visit `/docs` when server is running\n- **Database Models**: Check `python_server/models.py`\n- **API Routes**: See `python_server/routes.py`\n\n## 💡 Key Differences from TypeScript Backend\n\n| Feature | TypeScript/Express | Python/FastAPI |\n|---------|-------------------|----------------|\n| Runtime | Node.js | Python 3.11 |\n| Framework | Express.js | FastAPI |\n| ORM | Drizzle | SQLAlchemy |\n| Auth | Passport.js | Authlib |\n| API Docs | Manual | Auto-generated |\n| Type Safety | TypeScript | Pydantic |\n| Performance | Fast | Very Fast |\n| Learning Curve | Medium | Easy |\n\n## 🎯 Next Steps\n\n1. ✅ Start Python server: `cd python_server && python main.py`\n2. ✅ Initialize database: `python init_db.py`\n3. ✅ Test API: Visit `/docs`\n4. ✅ Login and test leave management\n5. ✅ Explore other features\n\n---\n\n**Need Help?** Check the detailed README in `python_server/README.md` or visit the `/docs` endpoint for interactive API testing.\n","size_bytes":7355},"SWITCH_TO_PYTHON.md":{"content":"# 🐍 Switch to Python Backend - Simple Guide\n\nYour Python backend is **ready to use**! Follow these simple steps to switch from TypeScript to Python.\n\n## ✅ What's Already Done\n\n- ✅ Complete Python/FastAPI backend created in `python_server/`\n- ✅ Database initialized with 6 leave types\n- ✅ All API endpoints implemented\n- ✅ Authentication, OpenAI, and Object Storage integrated\n- ✅ Comprehensive documentation created\n\n## 🚀 How to Run the Python Backend\n\n### Option 1: Quick Start (Recommended)\n\n1. **Stop the current workflow** in the Replit panel (click the stop button)\n\n2. **Open a new Shell tab** in Replit\n\n3. **Run this single command**:\n```bash\ncd python_server && python main.py\n```\n\n4. **That's it!** The server will start on port 5000\n\n### Option 2: Using the Workflow\n\n1. **Edit the workflow**:\n   - Click on \"Start application\" workflow\n   - Change the command from `npm run dev` to:\n     ```bash\n     cd python_server && python main.py\n     ```\n   - Save and restart the workflow\n\n### Option 3: Run Both Servers\n\nIf you want to keep the TypeScript server and test Python separately:\n\n1. **Keep TypeScript server** running on port 5000\n2. **Modify Python server** to run on a different port (edit `python_server/main.py`, change port to 8000)\n3. **Run Python server** in a separate Shell tab\n\n## 📋 Leave Types Already Available\n\nThe database has been initialized with these 6 leave types:\n\n1. **Casual Leave** - 12 days (Carry Forward: Yes)\n2. **Sick Leave** - 10 days (Carry Forward: No)\n3. **Earned Leave** - 20 days (Carry Forward: Yes)\n4. **Maternity Leave** - 180 days (Carry Forward: No)\n5. **Paternity Leave** - 15 days (Carry Forward: No)\n6. **Compensatory Off** - 12 days (Carry Forward: No)\n\n## 🧪 Testing the Leave Feature\n\nOnce the Python server is running:\n\n### 1. Test via API Documentation\nVisit: **http://your-repl-url/docs**\n\nTry these endpoints:\n- `GET /api/leave-types` - Should return 6 leave types\n- `GET /api/leaves` - Your leave requests (after login)\n- `POST /api/leaves` - Submit a new leave request\n\n### 2. Test via Frontend\n\n1. Login to the app\n2. Go to \"Apply Leave\" page\n3. **Leave type dropdown** should show all 6 types\n4. Fill the form and **click Submit**\n5. Check \"Leave Summary\" to see your request\n\n## 🔧 Troubleshooting\n\n### \"Port 5000 already in use\"\nStop the TypeScript server first, or change Python server port.\n\n### \"Leave types not showing\"\nDatabase is already initialized! If you see this, run:\n```bash\ncd python_server && python init_db.py\n```\n\n### \"Unauthorized\" errors\nMake sure you're logged in via Replit Auth. Click \"Login\" in the app.\n\n### Check if Python server is running\n```bash\ncurl http://localhost:5000/docs\n```\n\nShould show the API documentation page.\n\n## 📚 Documentation\n\n- **Python Backend README**: `python_server/README.md`\n- **Complete Setup Guide**: `README_PYTHON_BACKEND.md`\n- **API Docs** (when running): http://localhost:5000/docs\n\n## 🎯 What Works Right Now\n\n### ✅ Fully Implemented Features\n\n1. **Authentication**: Replit Auth with OIDC\n2. **Leave Management**: Apply, view, update leaves\n3. **Leave Types**: 6 types pre-configured\n4. **Leave Balances**: Track remaining days\n5. **Attendance**: View and regularize attendance\n6. **Salary Slips**: View and download\n7. **Documents**: Upload and view HR documents\n8. **AI Assistant**: Chat with GPT-4o about HR policies\n9. **Dashboard**: Overview statistics\n\n### API Endpoints Available\n\n```\nGET    /api/auth/user              - Get current user\nGET    /api/leave-types            - Get all leave types ✅\nGET    /api/leave-balances         - Get leave balances ✅\nGET    /api/leaves                 - Get user's leaves ✅\nPOST   /api/leaves                 - Apply for leave ✅\nPUT    /api/leaves/{id}            - Update leave request ✅\nDELETE /api/leaves/{id}            - Cancel leave request ✅\nGET    /api/attendance             - Get attendance records\nPOST   /api/attendance/regularize  - Regularize attendance\nGET    /api/salary                 - Get salary slips\nGET    /api/documents              - Get HR documents\nPOST   /api/ai/ask                 - Ask AI assistant\n```\n\n## 💡 Quick Commands Cheat Sheet\n\n```bash\n# Start Python server\ncd python_server && python main.py\n\n# Initialize/reset database\ncd python_server && python init_db.py\n\n# Install dependencies\ncd python_server && pip install -r requirements.txt\n\n# Check if server is running\ncurl http://localhost:5000/docs\n\n# View logs (if running in background)\ntail -f python_server/server.log\n```\n\n## 🎉 You're All Set!\n\nYour Python backend is production-ready and fully functional. Just run:\n\n```bash\ncd python_server && python main.py\n```\n\nThen open your Replit URL and test the leave management feature!\n\n---\n\n**Need more help?** Check:\n- `python_server/README.md` - Detailed Python backend guide\n- `README_PYTHON_BACKEND.md` - Complete setup documentation\n- `/docs` endpoint - Interactive API testing\n\n**Still having issues?** Make sure:\n1. Python server is running on port 5000\n2. Database is initialized (run `init_db.py`)\n3. You're logged in via Replit Auth\n4. Environment variables are set (DATABASE_URL, etc.)\n","size_bytes":5161},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"alembic>=1.16.5\",\n    \"authlib>=1.6.5\",\n    \"fastapi>=0.118.0\",\n    \"google-cloud-storage>=3.4.0\",\n    \"httpx>=0.28.1\",\n    \"itsdangerous>=2.2.0\",\n    \"openai>=2.1.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"pydantic>=2.11.10\",\n    \"pydantic-settings>=2.11.0\",\n    \"python-dotenv>=1.1.1\",\n    \"python-multipart>=0.0.20\",\n    \"sqlalchemy>=2.0.43\",\n    \"uvicorn>=0.37.0\",\n    \"websockets>=15.0.1\",\n]\n","size_bytes":541},"start_python_server.sh":{"content":"#!/bin/bash\n\n# HR Portal - Python Backend Startup Script\n# This script starts the Python FastAPI backend\n\nset -e  # Exit on error\n\necho \"==========================================\"\necho \"HR Portal - Starting Python Backend\"\necho \"==========================================\"\necho \"\"\n\n# Check if we're in the right directory\nif [ ! -d \"python_server\" ]; then\n    echo \"Error: python_server directory not found!\"\n    echo \"Please run this script from the project root\"\n    exit 1\nfi\n\n# Navigate to python_server\ncd python_server\n\n# Check if virtual environment exists\nif [ ! -d \"venv\" ]; then\n    echo \"Creating Python virtual environment...\"\n    python3 -m venv venv\n    echo \"✓ Virtual environment created\"\nfi\n\n# Activate virtual environment\necho \"Activating virtual environment...\"\nsource venv/bin/activate\n\n# Install/update dependencies\necho \"Installing dependencies...\"\npip install -q --upgrade pip\npip install -q -r requirements.txt\necho \"✓ Dependencies installed\"\n\n# Check if database needs initialization\necho \"\"\necho \"Checking database...\"\npython -c \"from database import Base, engine; Base.metadata.create_all(bind=engine); print('✓ Database tables ready')\"\n\n# Initialize database with sample data if needed\necho \"Initializing database with sample data...\"\npython init_db.py\n\necho \"\"\necho \"==========================================\"\necho \"Starting FastAPI server on port 5000...\"\necho \"==========================================\"\necho \"\"\necho \"API Docs: http://localhost:5000/docs\"\necho \"Server: http://localhost:5000\"\necho \"\"\n\n# Start the server\npython main.py\n","size_bytes":1576},"python_server/README.md":{"content":"# HR Employee Self-Service Portal - Python Backend\n\nComplete Python/FastAPI backend for the HR Employee Self-Service Portal with Replit Auth, PostgreSQL, OpenAI integration, and Google Cloud Storage.\n\n## Quick Start\n\n### Prerequisites\n- Python 3.11 or higher\n- PostgreSQL database\n- Replit environment (for Auth and Object Storage)\n\n### Installation\n\n1. **Install Dependencies**\n```bash\ncd python_server\npip install -r requirements.txt\n```\n\n2. **Set Up Environment Variables**\n\nCreate a `.env` file in the `python_server` directory:\n\n```bash\n# Database Configuration (automatically provided by Replit)\nDATABASE_URL=postgresql://user:password@host:port/dbname\n\n# Replit Auth Configuration (automatically provided by Replit)\nREPL_ID=your-repl-id\nREPLIT_DOMAINS=your-repl-domain.replit.app\nISSUER_URL=https://replit.com/oidc\n\n# OpenAI Configuration\nOPENAI_API_KEY=your-openai-api-key-here\n\n# Object Storage (set after creating bucket in Replit Object Storage)\nPUBLIC_OBJECT_SEARCH_PATHS=/bucket-name/public\nPRIVATE_OBJECT_DIR=/bucket-name/.private\n\n# Session Configuration\nSECRET_KEY=your-secret-key-here\n```\n\n3. **Initialize the Database**\n\nThe database tables will be created automatically when you first run the server. The application will:\n- Create all necessary tables (users, sessions, leave_types, leaves, attendance_records, etc.)\n- You'll need to add leave types and other initial data manually or via the API\n\n4. **Run the Server**\n\n```bash\npython main.py\n```\n\nOr use the provided script:\n```bash\n./run.sh\n```\n\nThe server will start on **http://0.0.0.0:5000**\n\n## API Documentation\n\nOnce the server is running, visit:\n- **Swagger UI**: http://localhost:5000/docs\n- **ReDoc**: http://localhost:5000/redoc\n\n## Project Structure\n\n```\npython_server/\n├── main.py                 # FastAPI application entry point\n├── config.py               # Configuration management\n├── database.py             # Database connection setup\n├── models.py               # SQLAlchemy database models\n├── storage.py              # Database storage layer (CRUD operations)\n├── routes.py               # API route handlers\n├── auth.py                 # Replit Auth (OIDC) integration\n├── openai_service.py       # OpenAI GPT-4o integration for AI assistant\n├── object_storage.py       # Google Cloud Storage integration\n├── requirements.txt        # Python dependencies\n├── .env.example            # Environment variable template\n└── README.md               # This file\n```\n\n## Key Features\n\n### Authentication\n- **Replit Auth (OIDC)**: Secure authentication using OpenID Connect\n- **Session Management**: PostgreSQL-backed sessions with automatic expiry\n- **Token Refresh**: Automatic token refresh for long-running sessions\n\n### Database\n- **ORM**: SQLAlchemy 2.0 with PostgreSQL\n- **Models**: User, LeaveType, LeaveBalance, Leave, AttendanceRecord, SalarySlip, HrDocument, AiConversation\n- **Automatic Table Creation**: Tables created automatically on first run\n\n### API Endpoints\n\n#### Authentication\n- `GET /api/auth/user` - Get current user information\n- `GET /api/auth/login` - Initiate Replit Auth login\n- `GET /api/auth/callback` - OAuth callback handler\n- `GET /api/auth/logout` - Logout current user\n\n#### Dashboard\n- `GET /api/dashboard/stats` - Get dashboard statistics (leaves, attendance, etc.)\n\n#### Leave Management\n- `GET /api/leave-types` - Get all leave types\n- `GET /api/leave-balances` - Get leave balances for user\n- `GET /api/leaves` - Get all leaves for user\n- `POST /api/leaves` - Apply for new leave\n- `PUT /api/leaves/{id}` - Update leave request\n- `DELETE /api/leaves/{id}` - Delete leave request\n\n#### Attendance\n- `GET /api/attendance` - Get attendance records\n- `POST /api/attendance/regularize` - Submit attendance regularization request\n\n#### Salary\n- `GET /api/salary` - Get salary slips\n- `GET /api/salary/{id}/download` - Download salary slip PDF\n\n#### Documents\n- `GET /api/documents` - Get HR documents\n- `GET /api/documents/upload-url` - Get presigned URL for uploading documents\n- `POST /api/documents` - Save document metadata after upload\n\n#### AI Assistant\n- `POST /api/ai/ask` - Ask HR assistant a question\n- `GET /api/ai/conversations` - Get conversation history\n\n### External Integrations\n\n#### OpenAI (GPT-4o)\n- AI-powered HR assistant\n- Document processing and vectorization\n- Context-aware responses based on HR policies\n\n#### Google Cloud Storage\n- Presigned URL generation for secure uploads\n- Public and private storage paths\n- Document categorization and management\n\n## Database Models\n\n### User\n- `id`: Primary key (from Replit Auth sub claim)\n- `email`: User email\n- `first_name`, `last_name`: User name\n- `profile_image_url`: Profile picture URL\n- `employee_id`: Employee ID number\n- `department`: Department name\n- `designation`: Job title\n- `joining_date`: Date of joining\n\n### LeaveType\n- `id`: Auto-increment primary key\n- `name`: Leave type name (e.g., \"Casual Leave\")\n- `max_days`: Maximum days allowed per year\n- `carry_forward`: Whether unused leaves can be carried forward\n\n### Leave\n- `id`: Auto-increment primary key\n- `user_id`: Foreign key to User\n- `leave_type_id`: Foreign key to LeaveType\n- `from_date`, `to_date`: Leave period\n- `days`: Number of days\n- `reason`: Leave reason\n- `status`: pending, approved, rejected, cancelled\n\n### AttendanceRecord\n- `id`: Auto-increment primary key\n- `user_id`: Foreign key to User\n- `date`: Attendance date\n- `status`: present, absent, wfh, half_day, on_leave\n- `check_in`, `check_out`: Time stamps\n- `working_hours`: Calculated hours\n\n### SalarySlip\n- `id`: Auto-increment primary key\n- `user_id`: Foreign key to User\n- `month`, `year`: Salary period\n- `basic_salary`, `hra`, `allowances`, `deductions`: Salary components\n- `gross_salary`, `net_salary`: Calculated amounts\n- `file_url`: PDF file URL\n\n## Adding Initial Data\n\nAfter the database is created, you'll need to add some initial data. You can use the FastAPI docs at `/docs` or create a simple script:\n\n```python\n# Example: Add leave types\nimport requests\n\n# Make sure you're logged in first\nleave_types = [\n    {\"name\": \"Casual Leave\", \"max_days\": 12, \"carry_forward\": True},\n    {\"name\": \"Sick Leave\", \"max_days\": 10, \"carry_forward\": False},\n    {\"name\": \"Earned Leave\", \"max_days\": 20, \"carry_forward\": True},\n    {\"name\": \"Maternity Leave\", \"max_days\": 180, \"carry_forward\": False},\n]\n\n# Note: You'll need to add these via database directly or create an admin endpoint\n```\n\n## Running with Frontend\n\nTo run the complete application (Python backend + React frontend):\n\n1. Make sure the Python server is running on port 5000\n2. The Vite dev server will proxy API requests to the Python backend\n3. Frontend will be available at the Replit URL\n\n## Troubleshooting\n\n### Database Connection Issues\n- Check `DATABASE_URL` environment variable\n- Ensure PostgreSQL is running\n- Verify connection string format\n\n### Authentication Issues\n- Verify `REPL_ID` and `REPLIT_DOMAINS` are set correctly\n- Check that Replit Auth is enabled in your Repl\n- Clear browser cookies and try again\n\n### Object Storage Issues\n- Ensure bucket is created in Replit Object Storage\n- Set `PUBLIC_OBJECT_SEARCH_PATHS` and `PRIVATE_OBJECT_DIR` correctly\n- Check sidecar endpoint is accessible at http://127.0.0.1:1106\n\n### OpenAI Issues\n- Verify `OPENAI_API_KEY` is set\n- Check API key has sufficient credits\n- Monitor rate limits\n\n## Development\n\n### Running in Development Mode\n\nThe server includes:\n- Auto-reload on code changes (via Uvicorn `--reload`)\n- CORS enabled for development\n- Detailed error messages\n- Request logging\n\n### Adding New Endpoints\n\n1. Define Pydantic models in `models.py`\n2. Add storage methods in `storage.py`\n3. Create route handlers in `routes.py`\n4. Test using `/docs` interactive API\n\n### Database Migrations\n\nThis project uses SQLAlchemy's automatic table creation. For production, consider using Alembic for migrations:\n\n```bash\n# Initialize Alembic (if needed)\nalembic init alembic\n\n# Create migration\nalembic revision --autogenerate -m \"description\"\n\n# Apply migration\nalembic upgrade head\n```\n\n## Production Deployment\n\n### Security Checklist\n- [ ] Set strong `SECRET_KEY`\n- [ ] Use environment variables for all secrets\n- [ ] Enable HTTPS\n- [ ] Set proper CORS origins\n- [ ] Review and limit API rate limits\n- [ ] Enable database backups\n- [ ] Monitor logs and errors\n\n### Performance Optimization\n- Use connection pooling (already configured in SQLAlchemy)\n- Enable caching for frequently accessed data\n- Use CDN for static files\n- Monitor and optimize slow queries\n\n## License\n\nMIT License - See LICENSE file for details\n\n## Support\n\nFor issues and questions:\n1. Check the `/docs` endpoint for API documentation\n2. Review logs for error messages\n3. Check Replit community forums for platform-specific issues\n","size_bytes":8846},"python_server/SETUP_GUIDE.md":{"content":"# Python Server Setup Guide\n\n## Quick Start Commands\n\n### 1. Install Dependencies\n```bash\ncd python_server\npip install -r requirements.txt\n```\n\n### 2. Configure Environment\n```bash\ncp .env.example .env\n# Edit .env with your configuration\n```\n\n### 3. Run the Server\n```bash\npython main.py\n```\n\nServer will start on `http://0.0.0.0:5000`\n\n## API Documentation\n\nOnce running, visit:\n- **Swagger UI**: http://localhost:5000/docs\n- **ReDoc**: http://localhost:5000/redoc\n\n## Development Mode\n\nFor auto-reload during development:\n```bash\nuvicorn main:app --reload --host 0.0.0.0 --port 5000\n```\n\n## Production Deployment\n\nUse Gunicorn with Uvicorn workers:\n```bash\ngunicorn -w 4 -k uvicorn.workers.UvicornWorker main:app --bind 0.0.0.0:5000\n```\n\n## Project Structure\n\n```\npython_server/\n├── main.py                 # Application entry point\n├── models.py               # SQLAlchemy database models\n├── database.py             # Database configuration\n├── storage.py              # Data access layer\n├── routes.py               # API route handlers\n├── auth.py                 # Authentication middleware\n├── openai_service.py       # OpenAI integration\n├── object_storage.py       # Object storage service\n├── config.py               # Application settings\n└── requirements.txt        # Python dependencies\n```\n\n## Environment Variables\n\nRequired variables in `.env`:\n\n```env\nDATABASE_URL=postgresql://user:password@host:port/database\nOPENAI_API_KEY=sk-...\nISSUER_URL=https://replit.com/oidc\nREPL_ID=your_repl_id\nREPLIT_DOMAINS=your-app.replit.app\nSESSION_SECRET=your_secret_key\nPUBLIC_OBJECT_SEARCH_PATHS=/bucket/public\nPRIVATE_OBJECT_DIR=/bucket/.private\nPORT=5000\n```\n\n## Database Migrations\n\n### Automatic (Recommended)\nTables are created automatically on first run.\n\n### Manual (Using Alembic)\n```bash\n# Initialize Alembic (first time only)\nalembic init migrations\n\n# Create a migration\nalembic revision --autogenerate -m \"Initial migration\"\n\n# Apply migrations\nalembic upgrade head\n```\n\n## Testing\n\nInstall test dependencies:\n```bash\npip install pytest pytest-asyncio httpx\n```\n\nRun tests:\n```bash\npytest\n```\n\n## Troubleshooting\n\n### Port Already in Use\n```bash\n# Kill process on port 5000\nlsof -ti:5000 | xargs kill -9\n```\n\n### Database Connection Error\nCheck your `DATABASE_URL` format:\n```\npostgresql://username:password@hostname:port/database_name\n```\n\n### Import Errors\nEnsure all dependencies are installed:\n```bash\npip install -r requirements.txt --force-reinstall\n```\n\n## Need Help?\n\nCheck the main README.md for detailed documentation.\n","size_bytes":2605},"python_server/auth.py":{"content":"import os\nimport time\nfrom authlib.integrations.starlette_client import OAuth\nfrom authlib.oidc.core import CodeIDToken\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom starlette.requests import Request\nfrom starlette.responses import RedirectResponse\nfrom fastapi import Depends, HTTPException, status\nfrom typing import Optional\nimport httpx\n\nISSUER_URL = os.getenv(\"ISSUER_URL\", \"https://replit.com/oidc\")\nREPL_ID = os.getenv(\"REPL_ID\", \"\")\nREPLIT_DOMAINS = os.getenv(\"REPLIT_DOMAINS\", \"\").split(\",\")\n\noauth = OAuth()\n\ndef configure_oauth():\n    for domain in REPLIT_DOMAINS:\n        if domain:\n            # Register with PKCE support (required by Replit OIDC)\n            redirect_uri = f\"https://{domain}/api/auth/callback\"\n            oauth.register(\n                name='replit',\n                client_id=REPL_ID,\n                server_metadata_url=f\"{ISSUER_URL}/.well-known/openid-configuration\",\n                client_kwargs={\n                    'scope': 'openid profile email',\n                    'code_challenge_method': 'S256'  # Enable PKCE with SHA-256\n                }\n            )\n            break\n\nasync def get_current_user(request: Request) -> dict:\n    user = request.session.get(\"user\")\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Not authenticated\"\n        )\n    \n    if user.get(\"expires_at\") and user[\"expires_at\"] < time.time():\n        refresh_token = user.get(\"refresh_token\")\n        if refresh_token:\n            try:\n                token_endpoint = f\"{ISSUER_URL}/token\"\n                async with httpx.AsyncClient() as client:\n                    response = await client.post(\n                        token_endpoint,\n                        data={\n                            \"grant_type\": \"refresh_token\",\n                            \"refresh_token\": refresh_token,\n                            \"client_id\": REPL_ID,\n                        }\n                    )\n                    if response.status_code == 200:\n                        token_data = response.json()\n                        user[\"access_token\"] = token_data.get(\"access_token\")\n                        user[\"refresh_token\"] = token_data.get(\"refresh_token\")\n                        user[\"expires_at\"] = time.time() + token_data.get(\"expires_in\", 0)\n                        request.session[\"user\"] = user\n                    else:\n                        raise HTTPException(\n                            status_code=status.HTTP_401_UNAUTHORIZED,\n                            detail=\"Token refresh failed\"\n                        )\n            except Exception:\n                raise HTTPException(\n                    status_code=status.HTTP_401_UNAUTHORIZED,\n                    detail=\"Unauthorized\"\n                )\n        else:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Unauthorized\"\n            )\n    \n    return user\n\ndef get_user_id(request: Request) -> str:\n    user = request.session.get(\"user\")\n    if not user or not user.get(\"claims\"):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Not authenticated\"\n        )\n    return user[\"claims\"].get(\"sub\")\n","size_bytes":3296},"python_server/config.py":{"content":"import os\nfrom pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    database_url: str = os.getenv(\"DATABASE_URL\", \"\")\n    openai_api_key: str = os.getenv(\"OPENAI_API_KEY\", \"\")\n    issuer_url: str = os.getenv(\"ISSUER_URL\", \"https://replit.com/oidc\")\n    repl_id: str = os.getenv(\"REPL_ID\", \"\")\n    replit_domains: str = os.getenv(\"REPLIT_DOMAINS\", \"\")\n    session_secret: str = os.getenv(\"SESSION_SECRET\", \"\")\n    public_object_search_paths: str = os.getenv(\"PUBLIC_OBJECT_SEARCH_PATHS\", \"\")\n    private_object_dir: str = os.getenv(\"PRIVATE_OBJECT_DIR\", \"\")\n    \n    class Config:\n        env_file = \".env\"\n        case_sensitive = False\n\nsettings = Settings()\n","size_bytes":680},"python_server/database.py":{"content":"import os\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom models import Base\n\nDATABASE_URL = os.getenv(\"DATABASE_URL\")\n\nif not DATABASE_URL:\n    raise ValueError(\"DATABASE_URL must be set. Did you forget to provision a database?\")\n\nengine = create_engine(DATABASE_URL, pool_pre_ping=True)\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\ndef init_db():\n    Base.metadata.create_all(bind=engine)\n","size_bytes":555},"python_server/init_db.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nDatabase Initialization Script\nAdds sample leave types and initial data for the HR portal\n\"\"\"\n\nimport os\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom database import Base\nfrom models import LeaveType\nfrom config import settings\n\ndef init_database():\n    \"\"\"Initialize database with sample data\"\"\"\n    \n    # Create database engine\n    engine = create_engine(settings.database_url, echo=True)\n    \n    # Create all tables\n    print(\"Creating database tables...\")\n    Base.metadata.create_all(bind=engine)\n    print(\"✓ Tables created successfully\")\n    \n    # Create session\n    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n    db = SessionLocal()\n    \n    try:\n        # Check if leave types already exist\n        existing_leave_types = db.query(LeaveType).count()\n        if existing_leave_types > 0:\n            print(f\"✓ Database already has {existing_leave_types} leave types\")\n            return\n        \n        # Add default leave types\n        print(\"Adding default leave types...\")\n        leave_types = [\n            LeaveType(\n                name=\"Casual Leave\",\n                max_days=12,\n                carry_forward=True,\n                description=\"For personal reasons, family functions, or other casual purposes\"\n            ),\n            LeaveType(\n                name=\"Sick Leave\",\n                max_days=10,\n                carry_forward=False,\n                description=\"For medical reasons or illness\"\n            ),\n            LeaveType(\n                name=\"Earned Leave\",\n                max_days=20,\n                carry_forward=True,\n                description=\"Annual leave earned through continuous service\"\n            ),\n            LeaveType(\n                name=\"Maternity Leave\",\n                max_days=180,\n                carry_forward=False,\n                description=\"For expecting mothers\"\n            ),\n            LeaveType(\n                name=\"Paternity Leave\",\n                max_days=15,\n                carry_forward=False,\n                description=\"For new fathers\"\n            ),\n            LeaveType(\n                name=\"Compensatory Off\",\n                max_days=12,\n                carry_forward=False,\n                description=\"Compensation for working on weekends or holidays\"\n            ),\n        ]\n        \n        db.add_all(leave_types)\n        db.commit()\n        print(f\"✓ Added {len(leave_types)} leave types successfully\")\n        \n        # Display added leave types\n        print(\"\\nLeave Types Added:\")\n        print(\"-\" * 60)\n        for lt in leave_types:\n            print(f\"  • {lt.name}: {lt.max_days} days (Carry Forward: {lt.carry_forward})\")\n        print(\"-\" * 60)\n        \n        print(\"\\n✓ Database initialization completed successfully!\")\n        print(\"\\nNext steps:\")\n        print(\"1. Run the server: python main.py\")\n        print(\"2. Login via Replit Auth\")\n        print(\"3. Start using the HR portal\")\n        \n    except Exception as e:\n        print(f\"✗ Error during initialization: {e}\")\n        db.rollback()\n        raise\n    finally:\n        db.close()\n\nif __name__ == \"__main__\":\n    print(\"=\" * 60)\n    print(\"HR Portal - Database Initialization\")\n    print(\"=\" * 60)\n    print()\n    init_database()\n","size_bytes":3333},"python_server/main.py":{"content":"import os\nimport subprocess\nfrom pathlib import Path\nfrom fastapi import FastAPI, Request\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom starlette.middleware.sessions import SessionMiddleware\nfrom fastapi.responses import RedirectResponse, JSONResponse, FileResponse, Response\nfrom fastapi.staticfiles import StaticFiles\nfrom authlib.integrations.starlette_client import OAuth\nimport uvicorn\nfrom datetime import datetime\nimport httpx\n\nfrom routes import router\nfrom database import init_db\nfrom config import settings\nfrom auth import configure_oauth, oauth\nfrom storage import DatabaseStorage\nfrom database import SessionLocal\nfrom models import UpsertUserSchema\n\napp = FastAPI(title=\"HR Employee Self-Service Portal\")\n\napp.add_middleware(SessionMiddleware, secret_key=settings.session_secret or \"your-secret-key-here\")\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\nconfigure_oauth()\n\n# Check if we're in production mode (based on NODE_ENV only)\nDIST_DIR = Path(__file__).parent.parent / \"dist\" / \"public\"\nIS_PRODUCTION = os.getenv(\"NODE_ENV\") == \"production\"\n\n@app.on_event(\"startup\")\nasync def startup_event():\n    init_db()\n    if IS_PRODUCTION:\n        print(f\"✓ Running in PRODUCTION mode, serving static files from {DIST_DIR}\")\n\n@app.get(\"/api/auth/login\")\nasync def login(request: Request):\n    # Use the configured domain to build the correct redirect URI\n    domain = os.getenv(\"REPLIT_DOMAINS\", \"\").split(\",\")[0]\n    redirect_uri = f\"https://{domain}/api/auth/callback\"\n    return await oauth.replit.authorize_redirect(request, redirect_uri)\n\n@app.get(\"/api/auth/callback\")\nasync def auth_callback(request: Request):\n    try:\n        token = await oauth.replit.authorize_access_token(request)\n        claims = token.get('userinfo') or {}\n        \n        user_data = {\n            \"claims\": claims,\n            \"access_token\": token.get('access_token'),\n            \"refresh_token\": token.get('refresh_token'),\n            \"expires_at\": token.get('expires_in', 0) + int(datetime.now().timestamp())\n        }\n        \n        request.session['user'] = user_data\n        \n        db = SessionLocal()\n        try:\n            storage = DatabaseStorage(db)\n            upsert_data = UpsertUserSchema(\n                id=claims.get(\"sub\"),\n                email=claims.get(\"email\"),\n                firstName=claims.get(\"first_name\"),\n                lastName=claims.get(\"last_name\"),\n                profileImageUrl=claims.get(\"profile_image_url\")\n            )\n            storage.upsert_user(upsert_data)\n        finally:\n            db.close()\n        \n        return RedirectResponse(url=\"/\")\n    except Exception as e:\n        return JSONResponse({\"error\": str(e)}, status_code=400)\n\n@app.get(\"/api/auth/logout\")\nasync def logout(request: Request):\n    request.session.clear()\n    return RedirectResponse(url=\"/\")\n\napp.include_router(router)\n\n# Serve static files in production, proxy to Vite in development\nif IS_PRODUCTION:\n    # Mount static files\n    app.mount(\"/assets\", StaticFiles(directory=str(DIST_DIR / \"assets\")), name=\"static\")\n    \n    @app.get(\"/{full_path:path}\")\n    async def serve_spa(full_path: str):\n        # Skip API routes\n        if full_path.startswith(\"api/\") or full_path.startswith(\"docs\") or full_path.startswith(\"openapi.json\"):\n            return JSONResponse({\"detail\": \"Not Found\"}, status_code=404)\n        \n        # Try to serve the requested file\n        file_path = DIST_DIR / full_path\n        if file_path.is_file():\n            return FileResponse(file_path)\n        \n        # For all other routes, serve index.html (SPA routing)\n        return FileResponse(DIST_DIR / \"index.html\")\nelse:\n    # Development: Proxy to Vite dev server for frontend\n    @app.middleware(\"http\")\n    async def proxy_to_vite(request: Request, call_next):\n        # Skip websocket requests (for Vite HMR)\n        if request.scope.get(\"type\") == \"websocket\":\n            return await call_next(request)\n        \n        # Only proxy non-API HTTP requests\n        if not request.url.path.startswith(\"/api\") and not request.url.path.startswith(\"/docs\") and not request.url.path.startswith(\"/openapi.json\"):\n            try:\n                async with httpx.AsyncClient() as client:\n                    vite_url = f\"http://localhost:5173{request.url.path}\"\n                    if request.url.query:\n                        vite_url += f\"?{request.url.query}\"\n                    \n                    response = await client.get(\n                        vite_url,\n                        headers=dict(request.headers),\n                        follow_redirects=True,\n                        timeout=30.0\n                    )\n                    \n                    return Response(\n                        content=response.content,\n                        status_code=response.status_code,\n                        headers=dict(response.headers),\n                        media_type=response.headers.get(\"content-type\")\n                    )\n            except:\n                pass\n        \n        return await call_next(request)\n\n@app.middleware(\"http\")\nasync def log_requests(request: Request, call_next):\n    start_time = datetime.now()\n    response = await call_next(request)\n    duration = (datetime.now() - start_time).total_seconds() * 1000\n    \n    if request.url.path.startswith(\"/api\"):\n        log_line = f\"{request.method} {request.url.path} {response.status_code} in {duration:.0f}ms\"\n        if len(log_line) > 80:\n            log_line = log_line[:79] + \"…\"\n        print(log_line)\n    \n    return response\n\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"PORT\", 5000))\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=port,\n        reload=True\n    )\n","size_bytes":5836},"python_server/models.py":{"content":"from sqlalchemy import Column, String, Integer, Text, Boolean, Date, DateTime, DECIMAL, ForeignKey, Index, ARRAY, JSON\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.sql import func\nfrom datetime import datetime\nfrom pydantic import BaseModel, Field\nfrom typing import Optional, List\nfrom decimal import Decimal\n\nBase = declarative_base()\n\nclass Session(Base):\n    __tablename__ = \"sessions\"\n    \n    sid = Column(String, primary_key=True)\n    sess = Column(JSON, nullable=False)\n    expire = Column(DateTime, nullable=False)\n    \n    __table_args__ = (\n        Index('IDX_session_expire', 'expire'),\n    )\n\nclass User(Base):\n    __tablename__ = \"users\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    email = Column(String, unique=True)\n    first_name = Column(\"first_name\", String)\n    last_name = Column(\"last_name\", String)\n    profile_image_url = Column(\"profile_image_url\", String)\n    employee_id = Column(\"employee_id\", String, unique=True)\n    department = Column(String)\n    designation = Column(String)\n    joining_date = Column(\"joining_date\", Date)\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n    updated_at = Column(\"updated_at\", DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass LeaveType(Base):\n    __tablename__ = \"leave_types\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    name = Column(String, nullable=False)\n    max_days = Column(\"max_days\", Integer, nullable=False)\n    carry_forward = Column(\"carry_forward\", Boolean, default=False)\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n\nclass LeaveBalance(Base):\n    __tablename__ = \"leave_balances\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    user_id = Column(\"user_id\", String, ForeignKey(\"users.id\"), nullable=False)\n    leave_type_id = Column(\"leave_type_id\", String, ForeignKey(\"leave_types.id\"), nullable=False)\n    total_days = Column(\"total_days\", Integer, nullable=False)\n    used_days = Column(\"used_days\", Integer, default=0)\n    year = Column(Integer, nullable=False)\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n    updated_at = Column(\"updated_at\", DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass Leave(Base):\n    __tablename__ = \"leaves\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    user_id = Column(\"user_id\", String, ForeignKey(\"users.id\"), nullable=False)\n    leave_type_id = Column(\"leave_type_id\", String, ForeignKey(\"leave_types.id\"), nullable=False)\n    from_date = Column(\"from_date\", Date, nullable=False)\n    to_date = Column(\"to_date\", Date, nullable=False)\n    days = Column(DECIMAL(precision=3, scale=1), nullable=False)\n    reason = Column(Text, nullable=False)\n    status = Column(String, nullable=False, default=\"pending\")\n    contact_number = Column(\"contact_number\", String)\n    attachment_path = Column(\"attachment_path\", String)\n    applied_at = Column(\"applied_at\", DateTime, default=datetime.utcnow)\n    reviewed_at = Column(\"reviewed_at\", DateTime)\n    reviewed_by = Column(\"reviewed_by\", String, ForeignKey(\"users.id\"))\n    review_comments = Column(\"review_comments\", Text)\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n    updated_at = Column(\"updated_at\", DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass AttendanceRecord(Base):\n    __tablename__ = \"attendance_records\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    user_id = Column(\"user_id\", String, ForeignKey(\"users.id\"), nullable=False)\n    date = Column(Date, nullable=False)\n    status = Column(String, nullable=False)\n    check_in = Column(\"check_in\", DateTime)\n    check_out = Column(\"check_out\", DateTime)\n    working_hours = Column(\"working_hours\", DECIMAL(precision=4, scale=2))\n    regularized_at = Column(\"regularized_at\", DateTime)\n    regularization_reason = Column(\"regularization_reason\", Text)\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n    updated_at = Column(\"updated_at\", DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\nclass SalarySlip(Base):\n    __tablename__ = \"salary_slips\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    user_id = Column(\"user_id\", String, ForeignKey(\"users.id\"), nullable=False)\n    month = Column(Integer, nullable=False)\n    year = Column(Integer, nullable=False)\n    basic_salary = Column(\"basic_salary\", DECIMAL(precision=10, scale=2), nullable=False)\n    allowances = Column(JSON)\n    deductions = Column(JSON)\n    gross_salary = Column(\"gross_salary\", DECIMAL(precision=10, scale=2), nullable=False)\n    net_salary = Column(\"net_salary\", DECIMAL(precision=10, scale=2), nullable=False)\n    payment_date = Column(\"payment_date\", Date)\n    file_path = Column(\"file_path\", String)\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n\nclass HrDocument(Base):\n    __tablename__ = \"hr_documents\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    name = Column(String, nullable=False)\n    category = Column(String, nullable=False)\n    file_path = Column(\"file_path\", String, nullable=False)\n    file_size = Column(\"file_size\", Integer)\n    mime_type = Column(\"mime_type\", String)\n    uploaded_by = Column(\"uploaded_by\", String, ForeignKey(\"users.id\"), nullable=False)\n    is_active = Column(\"is_active\", Boolean, default=True)\n    vector_count = Column(\"vector_count\", Integer, default=0)\n    processed_at = Column(\"processed_at\", DateTime)\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n\nclass AiConversation(Base):\n    __tablename__ = \"ai_conversations\"\n    \n    id = Column(String, primary_key=True, server_default=func.gen_random_uuid())\n    user_id = Column(\"user_id\", String, ForeignKey(\"users.id\"), nullable=False)\n    question = Column(Text, nullable=False)\n    answer = Column(Text, nullable=False)\n    documents_used = Column(\"documents_used\", ARRAY(Text))\n    created_at = Column(\"created_at\", DateTime, default=datetime.utcnow)\n\n\nclass UpsertUserSchema(BaseModel):\n    id: Optional[str] = None\n    email: Optional[str] = None\n    first_name: Optional[str] = Field(None, alias=\"firstName\")\n    last_name: Optional[str] = Field(None, alias=\"lastName\")\n    profile_image_url: Optional[str] = Field(None, alias=\"profileImageUrl\")\n    employee_id: Optional[str] = Field(None, alias=\"employeeId\")\n    department: Optional[str] = None\n    designation: Optional[str] = None\n    joining_date: Optional[str] = Field(None, alias=\"joiningDate\")\n    \n    class Config:\n        populate_by_name = True\n\nclass InsertLeaveSchema(BaseModel):\n    user_id: Optional[str] = Field(None, alias=\"userId\")\n    leave_type_id: str = Field(..., alias=\"leaveTypeId\")\n    from_date: str = Field(..., alias=\"fromDate\")\n    to_date: str = Field(..., alias=\"toDate\")\n    reason: str\n    contact_number: Optional[str] = Field(None, alias=\"contactNumber\")\n    attachment_path: Optional[str] = Field(None, alias=\"attachmentPath\")\n    days: Optional[str] = None\n    status: Optional[str] = \"pending\"\n    \n    class Config:\n        populate_by_name = True\n\nclass InsertAttendanceSchema(BaseModel):\n    user_id: str = Field(..., alias=\"userId\")\n    date: str\n    status: str\n    check_in: Optional[datetime] = Field(None, alias=\"checkIn\")\n    check_out: Optional[datetime] = Field(None, alias=\"checkOut\")\n    working_hours: Optional[Decimal] = Field(None, alias=\"workingHours\")\n    regularized_at: Optional[datetime] = Field(None, alias=\"regularizedAt\")\n    regularization_reason: Optional[str] = Field(None, alias=\"regularizationReason\")\n    \n    class Config:\n        populate_by_name = True\n\nclass InsertHrDocumentSchema(BaseModel):\n    name: str\n    category: str\n    file_path: str = Field(..., alias=\"filePath\")\n    file_size: Optional[int] = Field(None, alias=\"fileSize\")\n    mime_type: Optional[str] = Field(None, alias=\"mimeType\")\n    uploaded_by: str = Field(..., alias=\"uploadedBy\")\n    is_active: Optional[bool] = Field(True, alias=\"isActive\")\n    vector_count: Optional[int] = Field(0, alias=\"vectorCount\")\n    processed_at: Optional[datetime] = Field(None, alias=\"processedAt\")\n    \n    class Config:\n        populate_by_name = True\n\nclass InsertAiConversationSchema(BaseModel):\n    user_id: str = Field(..., alias=\"userId\")\n    question: str\n    answer: str\n    documents_used: Optional[List[str]] = Field(None, alias=\"documentsUsed\")\n    \n    class Config:\n        populate_by_name = True\n","size_bytes":8668},"python_server/object_storage.py":{"content":"import os\nimport json\nimport tempfile\nfrom google.cloud import storage\nfrom google.auth import external_account\nfrom typing import Optional, List\nimport httpx\n\nREPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\"\n\nclass ObjectStorageService:\n    _client = None\n    \n    def __init__(self):\n        pass\n    \n    def _get_client(self):\n        if self._client is None:\n            credentials_config = {\n                \"type\": \"external_account\",\n                \"audience\": \"replit\",\n                \"subject_token_type\": \"access_token\",\n                \"token_url\": f\"{REPLIT_SIDECAR_ENDPOINT}/token\",\n                \"credential_source\": {\n                    \"url\": f\"{REPLIT_SIDECAR_ENDPOINT}/credential\",\n                    \"format\": {\n                        \"type\": \"json\",\n                        \"subject_token_field_name\": \"access_token\"\n                    }\n                },\n                \"universe_domain\": \"googleapis.com\"\n            }\n            \n            with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:\n                json.dump(credentials_config, f)\n                config_file = f.name\n            \n            try:\n                credentials = external_account.Credentials.from_file(config_file)\n                self._client = storage.Client(\n                    project=\"\",\n                    credentials=credentials\n                )\n            finally:\n                if os.path.exists(config_file):\n                    os.unlink(config_file)\n        \n        return self._client\n    \n    @property\n    def client(self):\n        return self._get_client()\n    \n    def get_public_object_search_paths(self) -> List[str]:\n        paths_str = os.getenv(\"PUBLIC_OBJECT_SEARCH_PATHS\", \"\")\n        paths = list(set([\n            path.strip() for path in paths_str.split(\",\") if path.strip()\n        ]))\n        \n        if not paths:\n            raise ValueError(\n                \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \"\n                \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n            )\n        return paths\n    \n    def get_private_object_dir(self) -> str:\n        dir_path = os.getenv(\"PRIVATE_OBJECT_DIR\", \"\")\n        if not dir_path:\n            raise ValueError(\n                \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \"\n                \"tool and set PRIVATE_OBJECT_DIR env var.\"\n            )\n        return dir_path\n    \n    async def search_public_object(self, file_path: str) -> Optional[storage.Blob]:\n        for search_path in self.get_public_object_search_paths():\n            full_path = f\"{search_path}/{file_path}\"\n            \n            parts = full_path.split(\"/\", 1)\n            if len(parts) != 2:\n                continue\n            \n            bucket_name = parts[0].lstrip(\"/\")\n            object_name = parts[1]\n            \n            try:\n                bucket = self.client.bucket(bucket_name)\n                blob = bucket.blob(object_name)\n                \n                if blob.exists():\n                    return blob\n            except Exception:\n                continue\n        \n        return None\n    \n    async def get_object(self, full_path: str) -> Optional[storage.Blob]:\n        parts = full_path.split(\"/\", 1)\n        if len(parts) != 2:\n            return None\n        \n        bucket_name = parts[0].lstrip(\"/\")\n        object_name = parts[1]\n        \n        try:\n            bucket = self.client.bucket(bucket_name)\n            blob = bucket.blob(object_name)\n            \n            if blob.exists():\n                return blob\n        except Exception:\n            return None\n        \n        return None\n    \n    async def get_signed_upload_url(self, file_path: str, content_type: str, owner: str) -> str:\n        private_dir = self.get_private_object_dir()\n        full_path = f\"{private_dir}/{file_path}\"\n        \n        parts = full_path.split(\"/\", 1)\n        if len(parts) != 2:\n            raise ValueError(\"Invalid file path\")\n        \n        bucket_name = parts[0].lstrip(\"/\")\n        object_name = parts[1]\n        \n        acl_policy = {\n            \"owner\": owner,\n            \"visibility\": \"private\"\n        }\n        \n        request_data = {\n            \"bucket\": bucket_name,\n            \"object\": object_name,\n            \"method\": \"PUT\",\n            \"metadata\": {\n                \"custom:aclPolicy\": str(acl_policy)\n            }\n        }\n        \n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                f\"{REPLIT_SIDECAR_ENDPOINT}/sign\",\n                json=request_data,\n                headers={\"Content-Type\": \"application/json\"}\n            )\n            \n            if response.status_code != 200:\n                raise Exception(\n                    f\"Failed to sign object URL, errorcode: {response.status_code}, \"\n                    \"make sure you're running on Replit\"\n                )\n            \n            result = response.json()\n            return result.get(\"signed_url\", \"\")\n","size_bytes":5087},"python_server/openai_service.py":{"content":"import os\nfrom openai import OpenAI\nfrom typing import List, Dict, Optional\n\nclient = OpenAI(api_key=os.getenv(\"OPENAI_API_KEY\", \"\"))\n\nclass DocumentContext:\n    def __init__(self, name: str, content: str, category: str):\n        self.name = name\n        self.content = content\n        self.category = category\n\nasync def ask_hr_assistant(question: str, documents: List[DocumentContext]) -> Dict[str, any]:\n    try:\n        if not os.getenv(\"OPENAI_API_KEY\"):\n            raise ValueError(\"OpenAI API key is not configured. Please add your OPENAI_API_KEY to use the AI Assistant.\")\n        \n        context = \"\\n\\n---\\n\\n\".join([\n            f\"Document: {doc.name} ({doc.category})\\nContent: {doc.content}\"\n            for doc in documents\n        ])\n        \n        system_prompt = f\"\"\"You are an AI HR Assistant for an employee self-service portal. Your role is to answer HR-related questions based on the provided company documents and policies.\n\nGuidelines:\n- Always be helpful, professional, and accurate\n- Reference specific policy documents when applicable\n- If you don't have enough information, say so clearly\n- Provide actionable advice when possible\n- Keep responses concise but comprehensive\n- Format your response clearly with bullet points or sections when appropriate\n\nAvailable Documents:\n{context}\"\"\"\n        \n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": question}\n            ],\n            max_tokens=1000,\n        )\n        \n        answer = response.choices[0].message.content or \"I apologize, but I couldn't generate a response to your question.\"\n        \n        documents_used = [\n            doc.name for doc in documents\n            if doc.name.lower() in answer.lower() or doc.category.lower() in answer.lower()\n        ]\n        \n        if not documents_used and documents:\n            documents_used = [documents[0].name]\n        \n        return {\n            \"answer\": answer,\n            \"documentsUsed\": documents_used\n        }\n    \n    except Exception as error:\n        print(f\"Error calling OpenAI API: {error}\")\n        if \"OpenAI API key is not configured\" in str(error):\n            raise error\n        raise ValueError(\"Failed to get AI response. Please try again later.\")\n\nasync def process_document_for_vectorization(document_content: str, document_name: str) -> List[str]:\n    try:\n        system_prompt = \"\"\"You are a document processing assistant. Your task is to extract meaningful chunks from HR policy documents for efficient retrieval.\n\nInstructions:\n1. Break the document into logical sections\n2. Each chunk should be self-contained and meaningful\n3. Keep chunks between 100-500 words\n4. Preserve important context in each chunk\n5. Return the chunks as a JSON array\n\nReturn format: {\"chunks\": [\"chunk1\", \"chunk2\", ...]}\"\"\"\n        \n        response = client.chat.completions.create(\n            model=\"gpt-4o\",\n            messages=[\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": f\"Document: {document_name}\\n\\n{document_content}\"}\n            ],\n            response_format={\"type\": \"json_object\"},\n            max_tokens=2000,\n        )\n        \n        import json\n        result = json.loads(response.choices[0].message.content or '{\"chunks\": []}')\n        return result.get(\"chunks\", [])\n    \n    except Exception as error:\n        print(f\"Error processing document: {error}\")\n        chunks = [chunk for chunk in document_content.split('\\n\\n') if len(chunk.strip()) > 50]\n        return chunks[:50]\n","size_bytes":3680},"python_server/routes.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Form, Request\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nfrom datetime import datetime, date\nfrom pydantic import BaseModel\nimport os\n\nfrom database import get_db\nfrom storage import DatabaseStorage\nfrom auth import get_user_id\nfrom openai_service import ask_hr_assistant, process_document_for_vectorization, DocumentContext\nfrom object_storage import ObjectStorageService\nfrom models import (\n    InsertLeaveSchema, InsertAttendanceSchema, InsertHrDocumentSchema,\n    InsertAiConversationSchema, UpsertUserSchema\n)\n\nrouter = APIRouter(prefix=\"/api\")\n\nobject_storage = ObjectStorageService()\n\n@router.get(\"/auth/user\")\nasync def get_auth_user(request: Request, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    user = storage.get_user(user_id)\n    if not user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    \n    return {\n        \"id\": user.id,\n        \"email\": user.email,\n        \"firstName\": user.first_name,\n        \"lastName\": user.last_name,\n        \"profileImageUrl\": user.profile_image_url,\n        \"employeeId\": user.employee_id,\n        \"department\": user.department,\n        \"designation\": user.designation,\n        \"joiningDate\": str(user.joining_date) if user.joining_date else None,\n    }\n\n@router.get(\"/dashboard/stats\")\nasync def get_dashboard_stats(user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    \n    current_year = datetime.now().year\n    current_month = datetime.now().month\n    \n    leave_balances = storage.get_leave_balances(user_id, current_year)\n    leaves = storage.get_user_leaves(user_id)\n    attendance_records = storage.get_attendance_records(user_id, current_month, current_year)\n    \n    total_leaves_used = sum(balance.used_days or 0 for balance in leave_balances)\n    total_leaves_remaining = sum(balance.total_days - (balance.used_days or 0) for balance in leave_balances)\n    \n    present_days = len([r for r in attendance_records if r.status in ['present', 'wfh']])\n    total_working_days = len(attendance_records)\n    attendance_rate = (present_days / total_working_days * 100) if total_working_days > 0 else 0.0\n    \n    pending_leaves = len([leave for leave in leaves if leave.status == 'pending'])\n    \n    return {\n        \"leavesUsed\": total_leaves_used,\n        \"leavesRemaining\": total_leaves_remaining,\n        \"attendanceRate\": round(attendance_rate, 1),\n        \"pendingRequests\": pending_leaves,\n        \"leaveBalances\": [\n            {\n                \"type\": balance.leave_type_id,\n                \"used\": balance.used_days or 0,\n                \"total\": balance.total_days,\n                \"remaining\": balance.total_days - (balance.used_days or 0)\n            }\n            for balance in leave_balances\n        ]\n    }\n\n@router.get(\"/leave-types\")\nasync def get_leave_types(user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    leave_types = storage.get_leave_types()\n    return [\n        {\n            \"id\": lt.id,\n            \"name\": lt.name,\n            \"maxDays\": lt.max_days,\n            \"carryForward\": lt.carry_forward\n        }\n        for lt in leave_types\n    ]\n\n@router.get(\"/leave-balances\")\nasync def get_leave_balances(year: Optional[int] = None, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    year = year or datetime.now().year\n    balances = storage.get_leave_balances(user_id, year)\n    return [\n        {\n            \"id\": b.id,\n            \"userId\": b.user_id,\n            \"leaveTypeId\": b.leave_type_id,\n            \"totalDays\": b.total_days,\n            \"usedDays\": b.used_days,\n            \"year\": b.year\n        }\n        for b in balances\n    ]\n\n@router.post(\"/leaves\")\nasync def create_leave(leave_data: InsertLeaveSchema, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    \n    leave_data.user_id = user_id\n    \n    from_date = datetime.strptime(leave_data.from_date, \"%Y-%m-%d\").date()\n    to_date = datetime.strptime(leave_data.to_date, \"%Y-%m-%d\").date()\n    days_diff = (to_date - from_date).days + 1\n    \n    leave_data.days = str(days_diff)\n    \n    leave = storage.create_leave(leave_data)\n    \n    return {\n        \"id\": leave.id,\n        \"userId\": leave.user_id,\n        \"leaveTypeId\": leave.leave_type_id,\n        \"fromDate\": str(leave.from_date),\n        \"toDate\": str(leave.to_date),\n        \"days\": float(leave.days),\n        \"reason\": leave.reason,\n        \"status\": leave.status,\n        \"contactNumber\": leave.contact_number,\n        \"attachmentPath\": leave.attachment_path,\n    }\n\n@router.get(\"/leaves\")\nasync def get_leaves(user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    leaves = storage.get_user_leaves(user_id)\n    return [\n        {\n            \"id\": leave.id,\n            \"userId\": leave.user_id,\n            \"leaveTypeId\": leave.leave_type_id,\n            \"fromDate\": str(leave.from_date),\n            \"toDate\": str(leave.to_date),\n            \"days\": float(leave.days),\n            \"reason\": leave.reason,\n            \"status\": leave.status,\n            \"contactNumber\": leave.contact_number,\n            \"attachmentPath\": leave.attachment_path,\n            \"appliedAt\": leave.applied_at.isoformat() if leave.applied_at else None,\n        }\n        for leave in leaves\n    ]\n\n@router.put(\"/leaves/{leave_id}\")\nasync def update_leave(leave_id: str, updates: dict, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    updated_leave = storage.update_leave(leave_id, updates)\n    return {\n        \"id\": updated_leave.id,\n        \"userId\": updated_leave.user_id,\n        \"status\": updated_leave.status,\n    }\n\n@router.delete(\"/leaves/{leave_id}\")\nasync def delete_leave(leave_id: str, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    storage.delete_leave(leave_id)\n    return {\"message\": \"Leave deleted successfully\"}\n\n@router.get(\"/attendance\")\nasync def get_attendance(month: Optional[int] = None, year: Optional[int] = None, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    \n    month = month or datetime.now().month\n    year = year or datetime.now().year\n    \n    records = storage.get_attendance_records(user_id, month, year)\n    \n    stats = {\n        \"present\": len([r for r in records if r.status == 'present']),\n        \"absent\": len([r for r in records if r.status == 'absent']),\n        \"leave\": len([r for r in records if r.status == 'leave']),\n        \"wfh\": len([r for r in records if r.status == 'wfh'])\n    }\n    \n    return {\n        \"records\": [\n            {\n                \"id\": r.id,\n                \"userId\": r.user_id,\n                \"date\": str(r.date),\n                \"status\": r.status,\n                \"checkIn\": r.check_in.isoformat() if r.check_in else None,\n                \"checkOut\": r.check_out.isoformat() if r.check_out else None,\n                \"workingHours\": float(r.working_hours) if r.working_hours else None,\n            }\n            for r in records\n        ],\n        \"stats\": stats\n    }\n\n@router.get(\"/attendance/absent-dates\")\nasync def get_absent_dates(days: int = 7, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    absent_dates = storage.get_absent_dates(user_id, days)\n    return [\n        {\n            \"id\": r.id,\n            \"date\": str(r.date),\n            \"status\": r.status,\n        }\n        for r in absent_dates\n    ]\n\n@router.post(\"/attendance/regularize\")\nasync def regularize_attendance(\n    date: str = Form(...),\n    status: str = Form(...),\n    reason: str = Form(...),\n    user_id: str = Depends(get_user_id),\n    db: Session = Depends(get_db)\n):\n    storage = DatabaseStorage(db)\n    \n    record_data = InsertAttendanceSchema(\n        userId=user_id,\n        date=date,\n        status=status,\n        regularizationReason=reason,\n        regularizedAt=datetime.now()\n    )\n    \n    record = storage.create_attendance_record(record_data)\n    \n    return {\n        \"id\": record.id,\n        \"userId\": record.user_id,\n        \"date\": str(record.date),\n        \"status\": record.status,\n    }\n\n@router.get(\"/salary-slips\")\nasync def get_salary_slips(user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    slips = storage.get_salary_slips(user_id)\n    return [\n        {\n            \"id\": slip.id,\n            \"userId\": slip.user_id,\n            \"month\": slip.month,\n            \"year\": slip.year,\n            \"basicSalary\": float(slip.basic_salary),\n            \"allowances\": slip.allowances,\n            \"deductions\": slip.deductions,\n            \"grossSalary\": float(slip.gross_salary),\n            \"netSalary\": float(slip.net_salary),\n            \"paymentDate\": str(slip.payment_date) if slip.payment_date else None,\n            \"filePath\": slip.file_path,\n        }\n        for slip in slips\n    ]\n\n@router.get(\"/salary-slips/{month}/{year}\")\nasync def get_salary_slip(month: int, year: int, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    slip = storage.get_salary_slip(user_id, month, year)\n    \n    if not slip:\n        raise HTTPException(status_code=404, detail=\"Salary slip not found\")\n    \n    return {\n        \"id\": slip.id,\n        \"userId\": slip.user_id,\n        \"month\": slip.month,\n        \"year\": slip.year,\n        \"basicSalary\": float(slip.basic_salary),\n        \"allowances\": slip.allowances,\n        \"deductions\": slip.deductions,\n        \"grossSalary\": float(slip.gross_salary),\n        \"netSalary\": float(slip.net_salary),\n        \"paymentDate\": str(slip.payment_date) if slip.payment_date else None,\n        \"filePath\": slip.file_path,\n    }\n\n@router.get(\"/hr-documents\")\nasync def get_hr_documents(user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    documents = storage.get_hr_documents()\n    return [\n        {\n            \"id\": doc.id,\n            \"name\": doc.name,\n            \"category\": doc.category,\n            \"filePath\": doc.file_path,\n            \"fileSize\": doc.file_size,\n            \"mimeType\": doc.mime_type,\n            \"uploadedBy\": doc.uploaded_by,\n            \"isActive\": doc.is_active,\n            \"vectorCount\": doc.vector_count,\n            \"createdAt\": doc.created_at.isoformat() if doc.created_at else None,\n        }\n        for doc in documents\n    ]\n\n@router.post(\"/hr-documents/upload\")\nasync def upload_hr_document(\n    file: UploadFile = File(...),\n    category: str = Form(\"general\"),\n    user_id: str = Depends(get_user_id),\n    db: Session = Depends(get_db)\n):\n    storage = DatabaseStorage(db)\n    \n    import tempfile\n    \n    content = await file.read()\n    with tempfile.NamedTemporaryFile(delete=False, suffix=f\"_{file.filename}\", mode='wb') as temp_file:\n        temp_path = temp_file.name\n        temp_file.write(content)\n    \n    try:\n        with open(temp_path, 'r', encoding='utf-8', errors='ignore') as f:\n            file_content = f.read()\n    except Exception:\n        file_content = \"\"\n    \n    chunks = await process_document_for_vectorization(file_content, file.filename)\n    \n    document_data = InsertHrDocumentSchema(\n        name=file.filename,\n        category=category,\n        filePath=temp_path,\n        fileSize=file.size,\n        mimeType=file.content_type,\n        uploadedBy=user_id,\n        vectorCount=len(chunks),\n        processedAt=datetime.now()\n    )\n    \n    document = storage.create_hr_document(document_data)\n    \n    return {\n        \"id\": document.id,\n        \"name\": document.name,\n        \"category\": document.category,\n        \"filePath\": document.file_path,\n        \"vectorCount\": document.vector_count,\n    }\n\n@router.delete(\"/hr-documents/{document_id}\")\nasync def delete_hr_document(document_id: str, user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    storage.delete_hr_document(document_id)\n    return {\"message\": \"Document deleted successfully\"}\n\nclass AskQuestionSchema(BaseModel):\n    question: str\n\n@router.post(\"/ai/ask\")\nasync def ask_ai_assistant(\n    data: AskQuestionSchema,\n    user_id: str = Depends(get_user_id),\n    db: Session = Depends(get_db)\n):\n    storage = DatabaseStorage(db)\n    \n    question = data.question\n    if not question or not question.strip():\n        raise HTTPException(status_code=400, detail=\"Question is required\")\n    \n    documents = storage.get_hr_documents()\n    \n    document_context = [\n        DocumentContext(\n            name=doc.name,\n            content=f\"HR Policy document: {doc.name}. Category: {doc.category}. This document contains company policies and procedures.\",\n            category=doc.category\n        )\n        for doc in documents\n    ]\n    \n    result = await ask_hr_assistant(question, document_context)\n    \n    conversation_data = InsertAiConversationSchema(\n        userId=user_id,\n        question=question,\n        answer=result[\"answer\"],\n        documentsUsed=result[\"documentsUsed\"]\n    )\n    \n    storage.create_ai_conversation(conversation_data)\n    \n    return {\n        \"answer\": result[\"answer\"],\n        \"documentsUsed\": result[\"documentsUsed\"]\n    }\n\n@router.get(\"/ai/conversations\")\nasync def get_ai_conversations(user_id: str = Depends(get_user_id), db: Session = Depends(get_db)):\n    storage = DatabaseStorage(db)\n    conversations = storage.get_user_conversations(user_id)\n    return [\n        {\n            \"id\": conv.id,\n            \"userId\": conv.user_id,\n            \"question\": conv.question,\n            \"answer\": conv.answer,\n            \"documentsUsed\": conv.documents_used,\n            \"createdAt\": conv.created_at.isoformat() if conv.created_at else None,\n        }\n        for conv in conversations\n    ]\n","size_bytes":14093},"python_server/run.sh":{"content":"#!/bin/bash\n\n# Navigate to python_server directory\ncd \"$(dirname \"$0\")\"\n\n# Run the Python server\npython main.py\n","size_bytes":112},"python_server/storage.py":{"content":"from sqlalchemy.orm import Session\nfrom sqlalchemy import and_, desc, asc, extract\nfrom typing import List, Optional\nfrom datetime import datetime, timedelta\nfrom models import (\n    User, Leave, LeaveType, LeaveBalance, AttendanceRecord, SalarySlip,\n    HrDocument, AiConversation, UpsertUserSchema, InsertLeaveSchema,\n    InsertAttendanceSchema, InsertHrDocumentSchema, InsertAiConversationSchema\n)\n\nclass DatabaseStorage:\n    def __init__(self, db: Session):\n        self.db = db\n    \n    def get_user(self, user_id: str) -> Optional[User]:\n        return self.db.query(User).filter(User.id == user_id).first()\n    \n    def upsert_user(self, user_data: UpsertUserSchema) -> User:\n        user_dict = user_data.model_dump(exclude_none=True, by_alias=False)\n        \n        existing_user = self.db.query(User).filter(User.id == user_data.id).first() if user_data.id else None\n        \n        if existing_user:\n            for key, value in user_dict.items():\n                if key != 'id':\n                    setattr(existing_user, key, value)\n            existing_user.updated_at = datetime.utcnow()\n            self.db.commit()\n            self.db.refresh(existing_user)\n            return existing_user\n        else:\n            new_user = User(**user_dict)\n            self.db.add(new_user)\n            self.db.commit()\n            self.db.refresh(new_user)\n            return new_user\n    \n    def get_leave_types(self) -> List[LeaveType]:\n        return self.db.query(LeaveType).all()\n    \n    def get_leave_balances(self, user_id: str, year: int) -> List[LeaveBalance]:\n        return self.db.query(LeaveBalance).filter(\n            and_(LeaveBalance.user_id == user_id, LeaveBalance.year == year)\n        ).all()\n    \n    def create_leave(self, leave_data: InsertLeaveSchema) -> Leave:\n        leave_dict = leave_data.model_dump(exclude_none=True, by_alias=False)\n        new_leave = Leave(**leave_dict)\n        self.db.add(new_leave)\n        self.db.commit()\n        self.db.refresh(new_leave)\n        return new_leave\n    \n    def get_user_leaves(self, user_id: str) -> List[Leave]:\n        return self.db.query(Leave).filter(Leave.user_id == user_id).order_by(desc(Leave.created_at)).all()\n    \n    def update_leave(self, leave_id: str, updates: dict) -> Leave:\n        leave = self.db.query(Leave).filter(Leave.id == leave_id).first()\n        if not leave:\n            raise ValueError(f\"Leave with id {leave_id} not found\")\n        \n        for key, value in updates.items():\n            if hasattr(leave, key):\n                setattr(leave, key, value)\n        \n        leave.updated_at = datetime.utcnow()\n        self.db.commit()\n        self.db.refresh(leave)\n        return leave\n    \n    def delete_leave(self, leave_id: str):\n        leave = self.db.query(Leave).filter(Leave.id == leave_id).first()\n        if leave:\n            self.db.delete(leave)\n            self.db.commit()\n    \n    def get_attendance_records(self, user_id: str, month: int, year: int) -> List[AttendanceRecord]:\n        return self.db.query(AttendanceRecord).filter(\n            and_(\n                AttendanceRecord.user_id == user_id,\n                extract('month', AttendanceRecord.date) == month,\n                extract('year', AttendanceRecord.date) == year\n            )\n        ).order_by(asc(AttendanceRecord.date)).all()\n    \n    def create_attendance_record(self, record_data: InsertAttendanceSchema) -> AttendanceRecord:\n        record_dict = record_data.model_dump(exclude_none=True, by_alias=False)\n        new_record = AttendanceRecord(**record_dict)\n        self.db.add(new_record)\n        self.db.commit()\n        self.db.refresh(new_record)\n        return new_record\n    \n    def update_attendance_record(self, record_id: str, updates: dict) -> AttendanceRecord:\n        record = self.db.query(AttendanceRecord).filter(AttendanceRecord.id == record_id).first()\n        if not record:\n            raise ValueError(f\"Attendance record with id {record_id} not found\")\n        \n        for key, value in updates.items():\n            if hasattr(record, key):\n                setattr(record, key, value)\n        \n        record.updated_at = datetime.utcnow()\n        self.db.commit()\n        self.db.refresh(record)\n        return record\n    \n    def get_absent_dates(self, user_id: str, days: int) -> List[AttendanceRecord]:\n        cutoff_date = datetime.utcnow() - timedelta(days=days)\n        return self.db.query(AttendanceRecord).filter(\n            and_(\n                AttendanceRecord.user_id == user_id,\n                AttendanceRecord.status == 'absent',\n                AttendanceRecord.date >= cutoff_date.date()\n            )\n        ).order_by(desc(AttendanceRecord.date)).all()\n    \n    def get_salary_slips(self, user_id: str) -> List[SalarySlip]:\n        return self.db.query(SalarySlip).filter(\n            SalarySlip.user_id == user_id\n        ).order_by(desc(SalarySlip.year), desc(SalarySlip.month)).all()\n    \n    def get_salary_slip(self, user_id: str, month: int, year: int) -> Optional[SalarySlip]:\n        return self.db.query(SalarySlip).filter(\n            and_(\n                SalarySlip.user_id == user_id,\n                SalarySlip.month == month,\n                SalarySlip.year == year\n            )\n        ).first()\n    \n    def create_hr_document(self, document_data: InsertHrDocumentSchema) -> HrDocument:\n        document_dict = document_data.model_dump(exclude_none=True, by_alias=False)\n        new_document = HrDocument(**document_dict)\n        self.db.add(new_document)\n        self.db.commit()\n        self.db.refresh(new_document)\n        return new_document\n    \n    def get_hr_documents(self) -> List[HrDocument]:\n        return self.db.query(HrDocument).filter(\n            HrDocument.is_active == True\n        ).order_by(desc(HrDocument.created_at)).all()\n    \n    def update_hr_document(self, document_id: str, updates: dict) -> HrDocument:\n        document = self.db.query(HrDocument).filter(HrDocument.id == document_id).first()\n        if not document:\n            raise ValueError(f\"HR document with id {document_id} not found\")\n        \n        for key, value in updates.items():\n            if hasattr(document, key):\n                setattr(document, key, value)\n        \n        self.db.commit()\n        self.db.refresh(document)\n        return document\n    \n    def delete_hr_document(self, document_id: str):\n        document = self.db.query(HrDocument).filter(HrDocument.id == document_id).first()\n        if document:\n            document.is_active = False\n            self.db.commit()\n    \n    def create_ai_conversation(self, conversation_data: InsertAiConversationSchema) -> AiConversation:\n        conversation_dict = conversation_data.model_dump(exclude_none=True, by_alias=False)\n        new_conversation = AiConversation(**conversation_dict)\n        self.db.add(new_conversation)\n        self.db.commit()\n        self.db.refresh(new_conversation)\n        return new_conversation\n    \n    def get_user_conversations(self, user_id: str) -> List[AiConversation]:\n        return self.db.query(AiConversation).filter(\n            AiConversation.user_id == user_id\n        ).order_by(desc(AiConversation.created_at)).limit(50).all()\n","size_bytes":7216},"start_dev.sh":{"content":"#!/bin/bash\n\n# Start Vite dev server in background\necho \"Starting Vite dev server...\"\nnpx vite --port 5173 --host 0.0.0.0 &\nVITE_PID=$!\n\n# Wait for Vite to be ready\nsleep 3\n\n# Start Python server\necho \"Starting Python server...\"\ncd python_server && python main.py\n\n# Cleanup on exit\ntrap \"kill $VITE_PID\" EXIT\n","size_bytes":310}},"version":1}